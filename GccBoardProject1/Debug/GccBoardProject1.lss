
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022a4  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000022a4  000022a4  0000a2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000440  20000000  000022ac  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000a8  20000440  000026ec  00010440  2**2
                  ALLOC
  4 .stack        00002000  200004e8  00002794  00010440  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY
  7 .debug_info   000233d6  00000000  00000000  000104d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003214  00000000  00000000  000338af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b622  00000000  00000000  00036ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000530  00000000  00000000  000420e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001448  00000000  00000000  00042615  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018989  00000000  00000000  00043a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000bc05  00000000  00000000  0005c3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00084dfc  00000000  00000000  00067feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000c9c  00000000  00000000  000ecde8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200024e8 	.word	0x200024e8
       4:	00001529 	.word	0x00001529
       8:	00001521 	.word	0x00001521
       c:	00001521 	.word	0x00001521
	...
      2c:	00001521 	.word	0x00001521
	...
      38:	00001521 	.word	0x00001521
      3c:	00001521 	.word	0x00001521
      40:	00001521 	.word	0x00001521
      44:	00001521 	.word	0x00001521
      48:	00001521 	.word	0x00001521
      4c:	00001521 	.word	0x00001521
      50:	00001521 	.word	0x00001521
      54:	00001521 	.word	0x00001521
      58:	00001521 	.word	0x00001521
      5c:	00001521 	.word	0x00001521
      60:	00001521 	.word	0x00001521
      64:	000006b1 	.word	0x000006b1
      68:	000006c1 	.word	0x000006c1
      6c:	000006d1 	.word	0x000006d1
      70:	000006e1 	.word	0x000006e1
      74:	000006f1 	.word	0x000006f1
      78:	00000701 	.word	0x00000701
      7c:	00001521 	.word	0x00001521
      80:	00001521 	.word	0x00001521
      84:	00001521 	.word	0x00001521
      88:	00001521 	.word	0x00001521
      8c:	00001521 	.word	0x00001521
      90:	00001521 	.word	0x00001521
      94:	00001521 	.word	0x00001521
      98:	00001521 	.word	0x00001521
      9c:	00001521 	.word	0x00001521
      a0:	00001521 	.word	0x00001521
      a4:	00001521 	.word	0x00001521
      a8:	00001521 	.word	0x00001521
      ac:	00001521 	.word	0x00001521

000000b0 <deregister_tm_clones>:
      b0:	b508      	push	{r3, lr}
      b2:	4b06      	ldr	r3, [pc, #24]	; (cc <deregister_tm_clones+0x1c>)
      b4:	4806      	ldr	r0, [pc, #24]	; (d0 <deregister_tm_clones+0x20>)
      b6:	3303      	adds	r3, #3
      b8:	1a1b      	subs	r3, r3, r0
      ba:	2b06      	cmp	r3, #6
      bc:	d800      	bhi.n	c0 <deregister_tm_clones+0x10>
      be:	bd08      	pop	{r3, pc}
      c0:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x24>)
      c2:	2b00      	cmp	r3, #0
      c4:	d0fb      	beq.n	be <deregister_tm_clones+0xe>
      c6:	4798      	blx	r3
      c8:	e7f9      	b.n	be <deregister_tm_clones+0xe>
      ca:	46c0      	nop			; (mov r8, r8)
      cc:	000022ac 	.word	0x000022ac
      d0:	000022ac 	.word	0x000022ac
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	b508      	push	{r3, lr}
      da:	4807      	ldr	r0, [pc, #28]	; (f8 <register_tm_clones+0x20>)
      dc:	4b07      	ldr	r3, [pc, #28]	; (fc <register_tm_clones+0x24>)
      de:	1a1b      	subs	r3, r3, r0
      e0:	109b      	asrs	r3, r3, #2
      e2:	0fda      	lsrs	r2, r3, #31
      e4:	18d3      	adds	r3, r2, r3
      e6:	1059      	asrs	r1, r3, #1
      e8:	d100      	bne.n	ec <register_tm_clones+0x14>
      ea:	bd08      	pop	{r3, pc}
      ec:	4a04      	ldr	r2, [pc, #16]	; (100 <register_tm_clones+0x28>)
      ee:	2a00      	cmp	r2, #0
      f0:	d0fb      	beq.n	ea <register_tm_clones+0x12>
      f2:	4790      	blx	r2
      f4:	e7f9      	b.n	ea <register_tm_clones+0x12>
      f6:	46c0      	nop			; (mov r8, r8)
      f8:	000022ac 	.word	0x000022ac
      fc:	000022ac 	.word	0x000022ac
     100:	00000000 	.word	0x00000000

00000104 <__do_global_dtors_aux>:
     104:	b510      	push	{r4, lr}
     106:	4c07      	ldr	r4, [pc, #28]	; (124 <__do_global_dtors_aux+0x20>)
     108:	7823      	ldrb	r3, [r4, #0]
     10a:	2b00      	cmp	r3, #0
     10c:	d109      	bne.n	122 <__do_global_dtors_aux+0x1e>
     10e:	f7ff ffcf 	bl	b0 <deregister_tm_clones>
     112:	4b05      	ldr	r3, [pc, #20]	; (128 <__do_global_dtors_aux+0x24>)
     114:	2b00      	cmp	r3, #0
     116:	d002      	beq.n	11e <__do_global_dtors_aux+0x1a>
     118:	4804      	ldr	r0, [pc, #16]	; (12c <__do_global_dtors_aux+0x28>)
     11a:	e000      	b.n	11e <__do_global_dtors_aux+0x1a>
     11c:	bf00      	nop
     11e:	2301      	movs	r3, #1
     120:	7023      	strb	r3, [r4, #0]
     122:	bd10      	pop	{r4, pc}
     124:	20000440 	.word	0x20000440
     128:	00000000 	.word	0x00000000
     12c:	000022ac 	.word	0x000022ac

00000130 <frame_dummy>:
     130:	b508      	push	{r3, lr}
     132:	4b09      	ldr	r3, [pc, #36]	; (158 <frame_dummy+0x28>)
     134:	2b00      	cmp	r3, #0
     136:	d003      	beq.n	140 <frame_dummy+0x10>
     138:	4808      	ldr	r0, [pc, #32]	; (15c <frame_dummy+0x2c>)
     13a:	4909      	ldr	r1, [pc, #36]	; (160 <frame_dummy+0x30>)
     13c:	e000      	b.n	140 <frame_dummy+0x10>
     13e:	bf00      	nop
     140:	4808      	ldr	r0, [pc, #32]	; (164 <frame_dummy+0x34>)
     142:	6803      	ldr	r3, [r0, #0]
     144:	2b00      	cmp	r3, #0
     146:	d003      	beq.n	150 <frame_dummy+0x20>
     148:	4b07      	ldr	r3, [pc, #28]	; (168 <frame_dummy+0x38>)
     14a:	2b00      	cmp	r3, #0
     14c:	d000      	beq.n	150 <frame_dummy+0x20>
     14e:	4798      	blx	r3
     150:	f7ff ffc2 	bl	d8 <register_tm_clones>
     154:	bd08      	pop	{r3, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	00000000 	.word	0x00000000
     15c:	000022ac 	.word	0x000022ac
     160:	20000444 	.word	0x20000444
     164:	000022ac 	.word	0x000022ac
     168:	00000000 	.word	0x00000000

0000016c <at25dfx_chip_check_presence>:

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     16c:	b530      	push	{r4, r5, lr}
     16e:	b085      	sub	sp, #20
     170:	1c04      	adds	r4, r0, #0
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     172:	2300      	movs	r3, #0
     174:	9303      	str	r3, [sp, #12]
     176:	6805      	ldr	r5, [r0, #0]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     178:	4b30      	ldr	r3, [pc, #192]	; (23c <at25dfx_chip_check_presence+0xd0>)
     17a:	4798      	blx	r3
     17c:	686b      	ldr	r3, [r5, #4]
     17e:	b2db      	uxtb	r3, r3
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     180:	2b00      	cmp	r3, #0
     182:	d140      	bne.n	206 <at25dfx_chip_check_presence+0x9a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     184:	2301      	movs	r3, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     186:	712b      	strb	r3, [r5, #4]
     188:	4b2d      	ldr	r3, [pc, #180]	; (240 <at25dfx_chip_check_presence+0xd4>)
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     18a:	4798      	blx	r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     18c:	229f      	movs	r2, #159	; 0x9f
     18e:	ab01      	add	r3, sp, #4
     190:	701a      	strb	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     192:	7963      	ldrb	r3, [r4, #5]
     194:	09d9      	lsrs	r1, r3, #7

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     196:	2200      	movs	r2, #0

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     198:	2900      	cmp	r1, #0
     19a:	d138      	bne.n	20e <at25dfx_chip_check_presence+0xa2>
     19c:	095a      	lsrs	r2, r3, #5
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     19e:	01d2      	lsls	r2, r2, #7
     1a0:	4928      	ldr	r1, [pc, #160]	; (244 <at25dfx_chip_check_presence+0xd8>)
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     1a2:	1852      	adds	r2, r2, r1
     1a4:	e033      	b.n	20e <at25dfx_chip_check_presence+0xa2>
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     1a6:	095a      	lsrs	r2, r3, #5
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1a8:	01d2      	lsls	r2, r2, #7

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     1aa:	4926      	ldr	r1, [pc, #152]	; (244 <at25dfx_chip_check_presence+0xd8>)
     1ac:	1852      	adds	r2, r2, r1
     1ae:	211f      	movs	r1, #31
     1b0:	400b      	ands	r3, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     1b2:	2101      	movs	r1, #1
     1b4:	4099      	lsls	r1, r3

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     1b6:	6191      	str	r1, [r2, #24]
     1b8:	2300      	movs	r3, #0
     1ba:	6822      	ldr	r2, [r4, #0]
     1bc:	7113      	strb	r3, [r2, #4]
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     1be:	7923      	ldrb	r3, [r4, #4]
     1c0:	2b09      	cmp	r3, #9
     1c2:	d815      	bhi.n	1f0 <at25dfx_chip_check_presence+0x84>
     1c4:	009b      	lsls	r3, r3, #2
     1c6:	4a20      	ldr	r2, [pc, #128]	; (248 <at25dfx_chip_check_presence+0xdc>)
     1c8:	58d3      	ldr	r3, [r2, r3]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     1ca:	469f      	mov	pc, r3
     1cc:	4b1f      	ldr	r3, [pc, #124]	; (24c <at25dfx_chip_check_presence+0xe0>)
     1ce:	e012      	b.n	1f6 <at25dfx_chip_check_presence+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     1d0:	4b1f      	ldr	r3, [pc, #124]	; (250 <at25dfx_chip_check_presence+0xe4>)
     1d2:	e010      	b.n	1f6 <at25dfx_chip_check_presence+0x8a>
     1d4:	4b1f      	ldr	r3, [pc, #124]	; (254 <at25dfx_chip_check_presence+0xe8>)
     1d6:	e00e      	b.n	1f6 <at25dfx_chip_check_presence+0x8a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     1d8:	4b1f      	ldr	r3, [pc, #124]	; (258 <at25dfx_chip_check_presence+0xec>)
     1da:	e00c      	b.n	1f6 <at25dfx_chip_check_presence+0x8a>
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     1dc:	4b1f      	ldr	r3, [pc, #124]	; (25c <at25dfx_chip_check_presence+0xf0>)
     1de:	e00a      	b.n	1f6 <at25dfx_chip_check_presence+0x8a>
     1e0:	4b1f      	ldr	r3, [pc, #124]	; (260 <at25dfx_chip_check_presence+0xf4>)
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     1e2:	e008      	b.n	1f6 <at25dfx_chip_check_presence+0x8a>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1e4:	4b1f      	ldr	r3, [pc, #124]	; (264 <at25dfx_chip_check_presence+0xf8>)
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     1e6:	e006      	b.n	1f6 <at25dfx_chip_check_presence+0x8a>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1e8:	4b1f      	ldr	r3, [pc, #124]	; (268 <at25dfx_chip_check_presence+0xfc>)
     1ea:	e004      	b.n	1f6 <at25dfx_chip_check_presence+0x8a>
		return &(ports[port_index]->Group[group_index]);
     1ec:	4b1f      	ldr	r3, [pc, #124]	; (26c <at25dfx_chip_check_presence+0x100>)
     1ee:	e002      	b.n	1f6 <at25dfx_chip_check_presence+0x8a>
     1f0:	2300      	movs	r3, #0
     1f2:	e000      	b.n	1f6 <at25dfx_chip_check_presence+0x8a>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1f4:	4b1e      	ldr	r3, [pc, #120]	; (270 <at25dfx_chip_check_presence+0x104>)
     1f6:	2014      	movs	r0, #20
     1f8:	9903      	ldr	r1, [sp, #12]
     1fa:	1acb      	subs	r3, r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1fc:	1e5a      	subs	r2, r3, #1

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
     1fe:	4193      	sbcs	r3, r2
	} while (status_reg & AT25DFX_STATUS_BUSY);

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     200:	425b      	negs	r3, r3
     202:	4018      	ands	r0, r3
     204:	e018      	b.n	238 <at25dfx_chip_check_presence+0xcc>
     206:	4b0e      	ldr	r3, [pc, #56]	; (240 <at25dfx_chip_check_presence+0xd4>)
	while (length && (status == STATUS_OK)) {
		_at25dfx_chip_enable_write(chip);

		cmd.address += cmd.length;
		cmd.data.tx += cmd.length;
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     208:	4798      	blx	r3
     20a:	2005      	movs	r0, #5
     20c:	e014      	b.n	238 <at25dfx_chip_check_presence+0xcc>
     20e:	211f      	movs	r1, #31
     210:	400b      	ands	r3, r1
     212:	2101      	movs	r1, #1

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     214:	4099      	lsls	r1, r3
     216:	6151      	str	r1, [r2, #20]
     218:	6820      	ldr	r0, [r4, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
     21a:	a901      	add	r1, sp, #4
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     21c:	2201      	movs	r2, #1
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     21e:	4b15      	ldr	r3, [pc, #84]	; (274 <at25dfx_chip_check_presence+0x108>)
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     220:	4798      	blx	r3
     222:	6820      	ldr	r0, [r4, #0]
     224:	a903      	add	r1, sp, #12
		return &(ports[port_index]->Group[group_index]);
     226:	2203      	movs	r2, #3
     228:	2300      	movs	r3, #0
     22a:	4d13      	ldr	r5, [pc, #76]	; (278 <at25dfx_chip_check_presence+0x10c>)
     22c:	47a8      	blx	r5
     22e:	7963      	ldrb	r3, [r4, #5]
     230:	09da      	lsrs	r2, r3, #7
     232:	d0b8      	beq.n	1a6 <at25dfx_chip_check_presence+0x3a>
     234:	2200      	movs	r2, #0
     236:	e7ba      	b.n	1ae <at25dfx_chip_check_presence+0x42>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     238:	b005      	add	sp, #20
     23a:	bd30      	pop	{r4, r5, pc}
     23c:	0000027d 	.word	0x0000027d

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     240:	000002bd 	.word	0x000002bd

	while (length && (status == STATUS_OK)) {
		_at25dfx_chip_enable_write(chip);

		cmd.address += cmd.length;
		cmd.data.tx += cmd.length;
     244:	41004400 	.word	0x41004400
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     248:	000021b0 	.word	0x000021b0
     24c:	0000651f 	.word	0x0000651f
     250:	0001441f 	.word	0x0001441f
     254:	0002451f 	.word	0x0002451f
     258:	0001451f 	.word	0x0001451f

	if (cmd.command_size > 1) {
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     25c:	0002461f 	.word	0x0002461f
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     260:	0003461f 	.word	0x0003461f
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     264:	0000861f 	.word	0x0000861f
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     268:	0001471f 	.word	0x0001471f
     26c:	0000481f 	.word	0x0000481f
		return &(ports[port_index]->Group[group_index]);
     270:	0000431f 	.word	0x0000431f
     274:	00000825 	.word	0x00000825
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     278:	00000711 	.word	0x00000711

0000027c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     27c:	4b0c      	ldr	r3, [pc, #48]	; (2b0 <cpu_irq_enter_critical+0x34>)
     27e:	681b      	ldr	r3, [r3, #0]
     280:	2b00      	cmp	r3, #0
     282:	d110      	bne.n	2a6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     284:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     288:	2b00      	cmp	r3, #0
     28a:	d109      	bne.n	2a0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     28c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     28e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     292:	2200      	movs	r2, #0
     294:	4b07      	ldr	r3, [pc, #28]	; (2b4 <cpu_irq_enter_critical+0x38>)
     296:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     298:	2201      	movs	r2, #1
     29a:	4b07      	ldr	r3, [pc, #28]	; (2b8 <cpu_irq_enter_critical+0x3c>)
     29c:	701a      	strb	r2, [r3, #0]
     29e:	e002      	b.n	2a6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     2a0:	2200      	movs	r2, #0
     2a2:	4b05      	ldr	r3, [pc, #20]	; (2b8 <cpu_irq_enter_critical+0x3c>)
     2a4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     2a6:	4b02      	ldr	r3, [pc, #8]	; (2b0 <cpu_irq_enter_critical+0x34>)
     2a8:	681a      	ldr	r2, [r3, #0]
     2aa:	3201      	adds	r2, #1
     2ac:	601a      	str	r2, [r3, #0]
}
     2ae:	4770      	bx	lr
     2b0:	2000045c 	.word	0x2000045c
     2b4:	2000000c 	.word	0x2000000c
     2b8:	20000460 	.word	0x20000460

000002bc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     2bc:	4b08      	ldr	r3, [pc, #32]	; (2e0 <cpu_irq_leave_critical+0x24>)
     2be:	681a      	ldr	r2, [r3, #0]
     2c0:	3a01      	subs	r2, #1
     2c2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     2c4:	681b      	ldr	r3, [r3, #0]
     2c6:	2b00      	cmp	r3, #0
     2c8:	d109      	bne.n	2de <cpu_irq_leave_critical+0x22>
     2ca:	4b06      	ldr	r3, [pc, #24]	; (2e4 <cpu_irq_leave_critical+0x28>)
     2cc:	781b      	ldrb	r3, [r3, #0]
     2ce:	2b00      	cmp	r3, #0
     2d0:	d005      	beq.n	2de <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     2d2:	2201      	movs	r2, #1
     2d4:	4b04      	ldr	r3, [pc, #16]	; (2e8 <cpu_irq_leave_critical+0x2c>)
     2d6:	701a      	strb	r2, [r3, #0]
     2d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     2dc:	b662      	cpsie	i
	}
}
     2de:	4770      	bx	lr
     2e0:	2000045c 	.word	0x2000045c
     2e4:	20000460 	.word	0x20000460
     2e8:	2000000c 	.word	0x2000000c

000002ec <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ee:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2f0:	ac01      	add	r4, sp, #4
     2f2:	2501      	movs	r5, #1
     2f4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     2f6:	2700      	movs	r7, #0
     2f8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     2fa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2fc:	203e      	movs	r0, #62	; 0x3e
     2fe:	1c21      	adds	r1, r4, #0
     300:	4e06      	ldr	r6, [pc, #24]	; (31c <system_board_init+0x30>)
     302:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     304:	2280      	movs	r2, #128	; 0x80
     306:	05d2      	lsls	r2, r2, #23
     308:	4b05      	ldr	r3, [pc, #20]	; (320 <system_board_init+0x34>)
     30a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     30c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     30e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     310:	200f      	movs	r0, #15
     312:	1c21      	adds	r1, r4, #0
     314:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     316:	b003      	add	sp, #12
     318:	bdf0      	pop	{r4, r5, r6, r7, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	00000325 	.word	0x00000325
     320:	41004480 	.word	0x41004480

00000324 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     324:	b500      	push	{lr}
     326:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     328:	ab01      	add	r3, sp, #4
     32a:	2280      	movs	r2, #128	; 0x80
     32c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     32e:	780a      	ldrb	r2, [r1, #0]
     330:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     332:	784a      	ldrb	r2, [r1, #1]
     334:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     336:	788a      	ldrb	r2, [r1, #2]
     338:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     33a:	1c19      	adds	r1, r3, #0
     33c:	4b01      	ldr	r3, [pc, #4]	; (344 <port_pin_set_config+0x20>)
     33e:	4798      	blx	r3
}
     340:	b003      	add	sp, #12
     342:	bd00      	pop	{pc}
     344:	000014cd 	.word	0x000014cd

00000348 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     348:	b538      	push	{r3, r4, r5, lr}
     34a:	1c15      	adds	r5, r2, #0
	/* Baud value variable */
	uint16_t baud_calculated = 0;

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     34c:	084c      	lsrs	r4, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     34e:	2340      	movs	r3, #64	; 0x40
{
	/* Baud value variable */
	uint16_t baud_calculated = 0;

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     350:	4284      	cmp	r4, r0
     352:	d30b      	bcc.n	36c <_sercom_get_sync_baud_val+0x24>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
     354:	0043      	lsls	r3, r0, #1
     356:	1c08      	adds	r0, r1, #0
     358:	1c19      	adds	r1, r3, #0
     35a:	4b05      	ldr	r3, [pc, #20]	; (370 <_sercom_get_sync_baud_val+0x28>)
     35c:	4798      	blx	r3
     35e:	3801      	subs	r0, #1
     360:	b280      	uxth	r0, r0

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     362:	2340      	movs	r3, #64	; 0x40
	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     364:	28ff      	cmp	r0, #255	; 0xff
     366:	d801      	bhi.n	36c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     368:	8028      	strh	r0, [r5, #0]
		return STATUS_OK;
     36a:	2300      	movs	r3, #0
	}
}
     36c:	1c18      	adds	r0, r3, #0
     36e:	bd38      	pop	{r3, r4, r5, pc}
     370:	00001769 	.word	0x00001769

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     374:	00000000 	.word	0x00000000

00000378 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     37a:	1c07      	adds	r7, r0, #0
     37c:	1c0d      	adds	r5, r1, #0
     37e:	1c16      	adds	r6, r2, #0
     380:	aa06      	add	r2, sp, #24
     382:	7810      	ldrb	r0, [r2, #0]
	uint64_t baud_calculated = 0;
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     384:	1c3a      	adds	r2, r7, #0
     386:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     388:	2440      	movs	r4, #64	; 0x40
	uint64_t baud_calculated = 0;
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     38a:	428a      	cmp	r2, r1
     38c:	d840      	bhi.n	410 <_sercom_get_async_baud_val+0x98>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     38e:	2b00      	cmp	r3, #0
     390:	d113      	bne.n	3ba <_sercom_get_async_baud_val+0x42>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
     392:	2100      	movs	r1, #0
     394:	1c3a      	adds	r2, r7, #0
     396:	4c22      	ldr	r4, [pc, #136]	; (420 <_sercom_get_async_baud_val+0xa8>)
     398:	47a0      	blx	r4
     39a:	1c01      	adds	r1, r0, #0
     39c:	2000      	movs	r0, #0
     39e:	1c2a      	adds	r2, r5, #0
     3a0:	2300      	movs	r3, #0
     3a2:	4c20      	ldr	r4, [pc, #128]	; (424 <_sercom_get_async_baud_val+0xac>)
     3a4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     3a6:	4d1d      	ldr	r5, [pc, #116]	; (41c <_sercom_get_async_baud_val+0xa4>)
     3a8:	4c1b      	ldr	r4, [pc, #108]	; (418 <_sercom_get_async_baud_val+0xa0>)
     3aa:	1c22      	adds	r2, r4, #0
     3ac:	1c2b      	adds	r3, r5, #0
     3ae:	1a12      	subs	r2, r2, r0
     3b0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     3b2:	0c12      	lsrs	r2, r2, #16
     3b4:	041b      	lsls	r3, r3, #16
     3b6:	431a      	orrs	r2, r3
     3b8:	e026      	b.n	408 <_sercom_get_async_baud_val+0x90>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     3ba:	2200      	movs	r2, #0
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     3bc:	2b01      	cmp	r3, #1
     3be:	d123      	bne.n	408 <_sercom_get_async_baud_val+0x90>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
     3c0:	0f4c      	lsrs	r4, r1, #29
     3c2:	00cd      	lsls	r5, r1, #3
     3c4:	2100      	movs	r1, #0
     3c6:	1c3a      	adds	r2, r7, #0
     3c8:	2300      	movs	r3, #0
     3ca:	4f15      	ldr	r7, [pc, #84]	; (420 <_sercom_get_async_baud_val+0xa8>)
     3cc:	47b8      	blx	r7
     3ce:	1c02      	adds	r2, r0, #0
     3d0:	1c0b      	adds	r3, r1, #0
     3d2:	1c28      	adds	r0, r5, #0
     3d4:	1c21      	adds	r1, r4, #0
     3d6:	4c13      	ldr	r4, [pc, #76]	; (424 <_sercom_get_async_baud_val+0xac>)
     3d8:	47a0      	blx	r4
			baud_int = baud_int / BAUD_FP_MAX;
     3da:	08c2      	lsrs	r2, r0, #3
			if(baud_int < BAUD_INT_MAX) {
     3dc:	4b12      	ldr	r3, [pc, #72]	; (428 <_sercom_get_async_baud_val+0xb0>)
     3de:	429a      	cmp	r2, r3
     3e0:	d90f      	bls.n	402 <_sercom_get_async_baud_val+0x8a>
     3e2:	3801      	subs	r0, #1
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     3e4:	2301      	movs	r3, #1
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     3e6:	4910      	ldr	r1, [pc, #64]	; (428 <_sercom_get_async_baud_val+0xb0>)
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
     3e8:	08c2      	lsrs	r2, r0, #3
			if(baud_int < BAUD_INT_MAX) {
     3ea:	428a      	cmp	r2, r1
     3ec:	d905      	bls.n	3fa <_sercom_get_async_baud_val+0x82>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     3ee:	3301      	adds	r3, #1
     3f0:	b2db      	uxtb	r3, r3
     3f2:	3801      	subs	r0, #1
     3f4:	2b08      	cmp	r3, #8
     3f6:	d1f7      	bne.n	3e8 <_sercom_get_async_baud_val+0x70>
     3f8:	e009      	b.n	40e <_sercom_get_async_baud_val+0x96>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3fa:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     3fc:	2b08      	cmp	r3, #8
     3fe:	d101      	bne.n	404 <_sercom_get_async_baud_val+0x8c>
     400:	e006      	b.n	410 <_sercom_get_async_baud_val+0x98>
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     402:	2300      	movs	r3, #0
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     404:	035b      	lsls	r3, r3, #13
     406:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     408:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     40a:	2400      	movs	r4, #0
     40c:	e000      	b.n	410 <_sercom_get_async_baud_val+0x98>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     40e:	2440      	movs	r4, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     410:	1c20      	adds	r0, r4, #0
     412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     414:	46c0      	nop			; (mov r8, r8)
     416:	46c0      	nop			; (mov r8, r8)
     418:	00000000 	.word	0x00000000
     41c:	00000001 	.word	0x00000001
     420:	00001849 	.word	0x00001849
     424:	00001809 	.word	0x00001809
     428:	00001fff 	.word	0x00001fff
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
     42c:	46c0      	nop			; (mov r8, r8)
     42e:	46c0      	nop			; (mov r8, r8)

00000430 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     430:	b510      	push	{r4, lr}
     432:	b082      	sub	sp, #8
     434:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     436:	4b0f      	ldr	r3, [pc, #60]	; (474 <sercom_set_gclk_generator+0x44>)
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2b00      	cmp	r3, #0
     43c:	d001      	beq.n	442 <sercom_set_gclk_generator+0x12>
     43e:	2900      	cmp	r1, #0
     440:	d00d      	beq.n	45e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     442:	a901      	add	r1, sp, #4
     444:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     446:	2013      	movs	r0, #19
     448:	4b0b      	ldr	r3, [pc, #44]	; (478 <sercom_set_gclk_generator+0x48>)
     44a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     44c:	2013      	movs	r0, #19
     44e:	4b0b      	ldr	r3, [pc, #44]	; (47c <sercom_set_gclk_generator+0x4c>)
     450:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     452:	4b08      	ldr	r3, [pc, #32]	; (474 <sercom_set_gclk_generator+0x44>)
     454:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     456:	2201      	movs	r2, #1
     458:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     45a:	2000      	movs	r0, #0
     45c:	e007      	b.n	46e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     45e:	4b05      	ldr	r3, [pc, #20]	; (474 <sercom_set_gclk_generator+0x44>)
     460:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     462:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     464:	1b14      	subs	r4, r2, r4
     466:	1e62      	subs	r2, r4, #1
     468:	4194      	sbcs	r4, r2
     46a:	4264      	negs	r4, r4
     46c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     46e:	b002      	add	sp, #8
     470:	bd10      	pop	{r4, pc}
     472:	46c0      	nop			; (mov r8, r8)
     474:	20000464 	.word	0x20000464
     478:	000013f1 	.word	0x000013f1
     47c:	00001361 	.word	0x00001361

00000480 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     480:	4b44      	ldr	r3, [pc, #272]	; (594 <_sercom_get_default_pad+0x114>)
     482:	4298      	cmp	r0, r3
     484:	d033      	beq.n	4ee <_sercom_get_default_pad+0x6e>
     486:	d806      	bhi.n	496 <_sercom_get_default_pad+0x16>
     488:	4b43      	ldr	r3, [pc, #268]	; (598 <_sercom_get_default_pad+0x118>)
     48a:	4298      	cmp	r0, r3
     48c:	d00d      	beq.n	4aa <_sercom_get_default_pad+0x2a>
     48e:	4b43      	ldr	r3, [pc, #268]	; (59c <_sercom_get_default_pad+0x11c>)
     490:	4298      	cmp	r0, r3
     492:	d01b      	beq.n	4cc <_sercom_get_default_pad+0x4c>
     494:	e06f      	b.n	576 <_sercom_get_default_pad+0xf6>
     496:	4b42      	ldr	r3, [pc, #264]	; (5a0 <_sercom_get_default_pad+0x120>)
     498:	4298      	cmp	r0, r3
     49a:	d04a      	beq.n	532 <_sercom_get_default_pad+0xb2>
     49c:	4b41      	ldr	r3, [pc, #260]	; (5a4 <_sercom_get_default_pad+0x124>)
     49e:	4298      	cmp	r0, r3
     4a0:	d058      	beq.n	554 <_sercom_get_default_pad+0xd4>
     4a2:	4b41      	ldr	r3, [pc, #260]	; (5a8 <_sercom_get_default_pad+0x128>)
     4a4:	4298      	cmp	r0, r3
     4a6:	d166      	bne.n	576 <_sercom_get_default_pad+0xf6>
     4a8:	e032      	b.n	510 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4aa:	2901      	cmp	r1, #1
     4ac:	d065      	beq.n	57a <_sercom_get_default_pad+0xfa>
     4ae:	2900      	cmp	r1, #0
     4b0:	d004      	beq.n	4bc <_sercom_get_default_pad+0x3c>
     4b2:	2902      	cmp	r1, #2
     4b4:	d006      	beq.n	4c4 <_sercom_get_default_pad+0x44>
     4b6:	2903      	cmp	r1, #3
     4b8:	d006      	beq.n	4c8 <_sercom_get_default_pad+0x48>
     4ba:	e001      	b.n	4c0 <_sercom_get_default_pad+0x40>
     4bc:	483b      	ldr	r0, [pc, #236]	; (5ac <_sercom_get_default_pad+0x12c>)
     4be:	e067      	b.n	590 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4c0:	2000      	movs	r0, #0
     4c2:	e065      	b.n	590 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4c4:	483a      	ldr	r0, [pc, #232]	; (5b0 <_sercom_get_default_pad+0x130>)
     4c6:	e063      	b.n	590 <_sercom_get_default_pad+0x110>
     4c8:	483a      	ldr	r0, [pc, #232]	; (5b4 <_sercom_get_default_pad+0x134>)
     4ca:	e061      	b.n	590 <_sercom_get_default_pad+0x110>
     4cc:	2901      	cmp	r1, #1
     4ce:	d056      	beq.n	57e <_sercom_get_default_pad+0xfe>
     4d0:	2900      	cmp	r1, #0
     4d2:	d004      	beq.n	4de <_sercom_get_default_pad+0x5e>
     4d4:	2902      	cmp	r1, #2
     4d6:	d006      	beq.n	4e6 <_sercom_get_default_pad+0x66>
     4d8:	2903      	cmp	r1, #3
     4da:	d006      	beq.n	4ea <_sercom_get_default_pad+0x6a>
     4dc:	e001      	b.n	4e2 <_sercom_get_default_pad+0x62>
     4de:	2003      	movs	r0, #3
     4e0:	e056      	b.n	590 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4e2:	2000      	movs	r0, #0
     4e4:	e054      	b.n	590 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4e6:	4834      	ldr	r0, [pc, #208]	; (5b8 <_sercom_get_default_pad+0x138>)
     4e8:	e052      	b.n	590 <_sercom_get_default_pad+0x110>
     4ea:	4834      	ldr	r0, [pc, #208]	; (5bc <_sercom_get_default_pad+0x13c>)
     4ec:	e050      	b.n	590 <_sercom_get_default_pad+0x110>
     4ee:	2901      	cmp	r1, #1
     4f0:	d047      	beq.n	582 <_sercom_get_default_pad+0x102>
     4f2:	2900      	cmp	r1, #0
     4f4:	d004      	beq.n	500 <_sercom_get_default_pad+0x80>
     4f6:	2902      	cmp	r1, #2
     4f8:	d006      	beq.n	508 <_sercom_get_default_pad+0x88>
     4fa:	2903      	cmp	r1, #3
     4fc:	d006      	beq.n	50c <_sercom_get_default_pad+0x8c>
     4fe:	e001      	b.n	504 <_sercom_get_default_pad+0x84>
     500:	482f      	ldr	r0, [pc, #188]	; (5c0 <_sercom_get_default_pad+0x140>)
     502:	e045      	b.n	590 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     504:	2000      	movs	r0, #0
     506:	e043      	b.n	590 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     508:	482e      	ldr	r0, [pc, #184]	; (5c4 <_sercom_get_default_pad+0x144>)
     50a:	e041      	b.n	590 <_sercom_get_default_pad+0x110>
     50c:	482e      	ldr	r0, [pc, #184]	; (5c8 <_sercom_get_default_pad+0x148>)
     50e:	e03f      	b.n	590 <_sercom_get_default_pad+0x110>
     510:	2901      	cmp	r1, #1
     512:	d038      	beq.n	586 <_sercom_get_default_pad+0x106>
     514:	2900      	cmp	r1, #0
     516:	d004      	beq.n	522 <_sercom_get_default_pad+0xa2>
     518:	2902      	cmp	r1, #2
     51a:	d006      	beq.n	52a <_sercom_get_default_pad+0xaa>
     51c:	2903      	cmp	r1, #3
     51e:	d006      	beq.n	52e <_sercom_get_default_pad+0xae>
     520:	e001      	b.n	526 <_sercom_get_default_pad+0xa6>
     522:	482a      	ldr	r0, [pc, #168]	; (5cc <_sercom_get_default_pad+0x14c>)
     524:	e034      	b.n	590 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     526:	2000      	movs	r0, #0
     528:	e032      	b.n	590 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     52a:	4829      	ldr	r0, [pc, #164]	; (5d0 <_sercom_get_default_pad+0x150>)
     52c:	e030      	b.n	590 <_sercom_get_default_pad+0x110>
     52e:	4829      	ldr	r0, [pc, #164]	; (5d4 <_sercom_get_default_pad+0x154>)
     530:	e02e      	b.n	590 <_sercom_get_default_pad+0x110>
     532:	2901      	cmp	r1, #1
     534:	d029      	beq.n	58a <_sercom_get_default_pad+0x10a>
     536:	2900      	cmp	r1, #0
     538:	d004      	beq.n	544 <_sercom_get_default_pad+0xc4>
     53a:	2902      	cmp	r1, #2
     53c:	d006      	beq.n	54c <_sercom_get_default_pad+0xcc>
     53e:	2903      	cmp	r1, #3
     540:	d006      	beq.n	550 <_sercom_get_default_pad+0xd0>
     542:	e001      	b.n	548 <_sercom_get_default_pad+0xc8>
     544:	4824      	ldr	r0, [pc, #144]	; (5d8 <_sercom_get_default_pad+0x158>)
     546:	e023      	b.n	590 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     548:	2000      	movs	r0, #0
     54a:	e021      	b.n	590 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     54c:	4823      	ldr	r0, [pc, #140]	; (5dc <_sercom_get_default_pad+0x15c>)
     54e:	e01f      	b.n	590 <_sercom_get_default_pad+0x110>
     550:	4823      	ldr	r0, [pc, #140]	; (5e0 <_sercom_get_default_pad+0x160>)
     552:	e01d      	b.n	590 <_sercom_get_default_pad+0x110>
     554:	2901      	cmp	r1, #1
     556:	d01a      	beq.n	58e <_sercom_get_default_pad+0x10e>
     558:	2900      	cmp	r1, #0
     55a:	d004      	beq.n	566 <_sercom_get_default_pad+0xe6>
     55c:	2902      	cmp	r1, #2
     55e:	d006      	beq.n	56e <_sercom_get_default_pad+0xee>
     560:	2903      	cmp	r1, #3
     562:	d006      	beq.n	572 <_sercom_get_default_pad+0xf2>
     564:	e001      	b.n	56a <_sercom_get_default_pad+0xea>
     566:	481f      	ldr	r0, [pc, #124]	; (5e4 <_sercom_get_default_pad+0x164>)
     568:	e012      	b.n	590 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     56a:	2000      	movs	r0, #0
     56c:	e010      	b.n	590 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     56e:	481e      	ldr	r0, [pc, #120]	; (5e8 <_sercom_get_default_pad+0x168>)
     570:	e00e      	b.n	590 <_sercom_get_default_pad+0x110>
     572:	481e      	ldr	r0, [pc, #120]	; (5ec <_sercom_get_default_pad+0x16c>)
     574:	e00c      	b.n	590 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     576:	2000      	movs	r0, #0
     578:	e00a      	b.n	590 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     57a:	481d      	ldr	r0, [pc, #116]	; (5f0 <_sercom_get_default_pad+0x170>)
     57c:	e008      	b.n	590 <_sercom_get_default_pad+0x110>
     57e:	481d      	ldr	r0, [pc, #116]	; (5f4 <_sercom_get_default_pad+0x174>)
     580:	e006      	b.n	590 <_sercom_get_default_pad+0x110>
     582:	481d      	ldr	r0, [pc, #116]	; (5f8 <_sercom_get_default_pad+0x178>)
     584:	e004      	b.n	590 <_sercom_get_default_pad+0x110>
     586:	481d      	ldr	r0, [pc, #116]	; (5fc <_sercom_get_default_pad+0x17c>)
     588:	e002      	b.n	590 <_sercom_get_default_pad+0x110>
     58a:	481d      	ldr	r0, [pc, #116]	; (600 <_sercom_get_default_pad+0x180>)
     58c:	e000      	b.n	590 <_sercom_get_default_pad+0x110>
     58e:	481d      	ldr	r0, [pc, #116]	; (604 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     590:	4770      	bx	lr
     592:	46c0      	nop			; (mov r8, r8)
     594:	42001000 	.word	0x42001000
     598:	42000800 	.word	0x42000800
     59c:	42000c00 	.word	0x42000c00
     5a0:	42001800 	.word	0x42001800
     5a4:	42001c00 	.word	0x42001c00
     5a8:	42001400 	.word	0x42001400
     5ac:	00040003 	.word	0x00040003
     5b0:	00060003 	.word	0x00060003
     5b4:	00070003 	.word	0x00070003
     5b8:	001e0003 	.word	0x001e0003
     5bc:	001f0003 	.word	0x001f0003
     5c0:	00080003 	.word	0x00080003
     5c4:	000a0003 	.word	0x000a0003
     5c8:	000b0003 	.word	0x000b0003
     5cc:	00100003 	.word	0x00100003
     5d0:	00120003 	.word	0x00120003
     5d4:	00130003 	.word	0x00130003
     5d8:	000c0003 	.word	0x000c0003
     5dc:	000e0003 	.word	0x000e0003
     5e0:	000f0003 	.word	0x000f0003
     5e4:	00160003 	.word	0x00160003
     5e8:	00180003 	.word	0x00180003
     5ec:	00190003 	.word	0x00190003
     5f0:	00050003 	.word	0x00050003
     5f4:	00010003 	.word	0x00010003
     5f8:	00090003 	.word	0x00090003
     5fc:	00110003 	.word	0x00110003
     600:	000d0003 	.word	0x000d0003
     604:	00170003 	.word	0x00170003

00000608 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     608:	4770      	bx	lr
     60a:	46c0      	nop			; (mov r8, r8)

0000060c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     60c:	b570      	push	{r4, r5, r6, lr}
     60e:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     610:	4a0c      	ldr	r2, [pc, #48]	; (644 <_sercom_get_sercom_inst_index+0x38>)
     612:	466b      	mov	r3, sp
     614:	ca70      	ldmia	r2!, {r4, r5, r6}
     616:	c370      	stmia	r3!, {r4, r5, r6}
     618:	ca32      	ldmia	r2!, {r1, r4, r5}
     61a:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     61c:	9e00      	ldr	r6, [sp, #0]
     61e:	4286      	cmp	r6, r0
     620:	d006      	beq.n	630 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     622:	2301      	movs	r3, #1
     624:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     626:	4669      	mov	r1, sp
     628:	5852      	ldr	r2, [r2, r1]
     62a:	4282      	cmp	r2, r0
     62c:	d103      	bne.n	636 <_sercom_get_sercom_inst_index+0x2a>
     62e:	e000      	b.n	632 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     630:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     632:	b2d8      	uxtb	r0, r3
     634:	e003      	b.n	63e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     636:	3301      	adds	r3, #1
     638:	2b06      	cmp	r3, #6
     63a:	d1f3      	bne.n	624 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     63c:	2000      	movs	r0, #0
}
     63e:	b006      	add	sp, #24
     640:	bd70      	pop	{r4, r5, r6, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	000021d8 	.word	0x000021d8

00000648 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     648:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     64a:	4b0a      	ldr	r3, [pc, #40]	; (674 <_sercom_set_handler+0x2c>)
     64c:	781b      	ldrb	r3, [r3, #0]
     64e:	2b00      	cmp	r3, #0
     650:	d10c      	bne.n	66c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     652:	4f09      	ldr	r7, [pc, #36]	; (678 <_sercom_set_handler+0x30>)
     654:	4e09      	ldr	r6, [pc, #36]	; (67c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     656:	4d0a      	ldr	r5, [pc, #40]	; (680 <_sercom_set_handler+0x38>)
     658:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     65a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     65c:	195a      	adds	r2, r3, r5
     65e:	6014      	str	r4, [r2, #0]
     660:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     662:	2b18      	cmp	r3, #24
     664:	d1f9      	bne.n	65a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     666:	2201      	movs	r2, #1
     668:	4b02      	ldr	r3, [pc, #8]	; (674 <_sercom_set_handler+0x2c>)
     66a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     66c:	0080      	lsls	r0, r0, #2
     66e:	4b02      	ldr	r3, [pc, #8]	; (678 <_sercom_set_handler+0x30>)
     670:	50c1      	str	r1, [r0, r3]
}
     672:	bdf0      	pop	{r4, r5, r6, r7, pc}
     674:	20000468 	.word	0x20000468
     678:	2000046c 	.word	0x2000046c
     67c:	00000609 	.word	0x00000609
     680:	2000049c 	.word	0x2000049c

00000684 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     684:	b510      	push	{r4, lr}
     686:	b082      	sub	sp, #8
     688:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     68a:	4668      	mov	r0, sp
     68c:	4905      	ldr	r1, [pc, #20]	; (6a4 <_sercom_get_interrupt_vector+0x20>)
     68e:	3118      	adds	r1, #24
     690:	2206      	movs	r2, #6
     692:	4b05      	ldr	r3, [pc, #20]	; (6a8 <_sercom_get_interrupt_vector+0x24>)
     694:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     696:	1c20      	adds	r0, r4, #0
     698:	4b04      	ldr	r3, [pc, #16]	; (6ac <_sercom_get_interrupt_vector+0x28>)
     69a:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     69c:	466b      	mov	r3, sp
     69e:	5618      	ldrsb	r0, [r3, r0]
}
     6a0:	b002      	add	sp, #8
     6a2:	bd10      	pop	{r4, pc}
     6a4:	000021d8 	.word	0x000021d8
     6a8:	000020b1 	.word	0x000020b1
     6ac:	0000060d 	.word	0x0000060d

000006b0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     6b0:	b508      	push	{r3, lr}
     6b2:	4b02      	ldr	r3, [pc, #8]	; (6bc <SERCOM0_Handler+0xc>)
     6b4:	681b      	ldr	r3, [r3, #0]
     6b6:	2000      	movs	r0, #0
     6b8:	4798      	blx	r3
     6ba:	bd08      	pop	{r3, pc}
     6bc:	2000046c 	.word	0x2000046c

000006c0 <SERCOM1_Handler>:
     6c0:	b508      	push	{r3, lr}
     6c2:	4b02      	ldr	r3, [pc, #8]	; (6cc <SERCOM1_Handler+0xc>)
     6c4:	685b      	ldr	r3, [r3, #4]
     6c6:	2001      	movs	r0, #1
     6c8:	4798      	blx	r3
     6ca:	bd08      	pop	{r3, pc}
     6cc:	2000046c 	.word	0x2000046c

000006d0 <SERCOM2_Handler>:
     6d0:	b508      	push	{r3, lr}
     6d2:	4b02      	ldr	r3, [pc, #8]	; (6dc <SERCOM2_Handler+0xc>)
     6d4:	689b      	ldr	r3, [r3, #8]
     6d6:	2002      	movs	r0, #2
     6d8:	4798      	blx	r3
     6da:	bd08      	pop	{r3, pc}
     6dc:	2000046c 	.word	0x2000046c

000006e0 <SERCOM3_Handler>:
     6e0:	b508      	push	{r3, lr}
     6e2:	4b02      	ldr	r3, [pc, #8]	; (6ec <SERCOM3_Handler+0xc>)
     6e4:	68db      	ldr	r3, [r3, #12]
     6e6:	2003      	movs	r0, #3
     6e8:	4798      	blx	r3
     6ea:	bd08      	pop	{r3, pc}
     6ec:	2000046c 	.word	0x2000046c

000006f0 <SERCOM4_Handler>:
     6f0:	b508      	push	{r3, lr}
     6f2:	4b02      	ldr	r3, [pc, #8]	; (6fc <SERCOM4_Handler+0xc>)
     6f4:	691b      	ldr	r3, [r3, #16]
     6f6:	2004      	movs	r0, #4
     6f8:	4798      	blx	r3
     6fa:	bd08      	pop	{r3, pc}
     6fc:	2000046c 	.word	0x2000046c

00000700 <SERCOM5_Handler>:
     700:	b508      	push	{r3, lr}
     702:	4b02      	ldr	r3, [pc, #8]	; (70c <SERCOM5_Handler+0xc>)
     704:	695b      	ldr	r3, [r3, #20]
     706:	2005      	movs	r0, #5
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	2000046c 	.word	0x2000046c

00000710 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     710:	b5f0      	push	{r4, r5, r6, r7, lr}
     712:	465f      	mov	r7, fp
     714:	4656      	mov	r6, sl
     716:	464d      	mov	r5, r9
     718:	4644      	mov	r4, r8
     71a:	b4f0      	push	{r4, r5, r6, r7}
     71c:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     71e:	6b80      	ldr	r0, [r0, #56]	; 0x38
     720:	b2c0      	uxtb	r0, r0
     722:	2805      	cmp	r0, #5
     724:	d076      	beq.n	814 <spi_read_buffer_wait+0x104>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     726:	2017      	movs	r0, #23
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     728:	2a00      	cmp	r2, #0
     72a:	d073      	beq.n	814 <spi_read_buffer_wait+0x104>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     72c:	79f4      	ldrb	r4, [r6, #7]
		return STATUS_ERR_DENIED;
     72e:	201c      	movs	r0, #28
	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     730:	2c00      	cmp	r4, #0
     732:	d06f      	beq.n	814 <spi_read_buffer_wait+0x104>
		return STATUS_ERR_DENIED;
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     734:	7970      	ldrb	r0, [r6, #5]
     736:	2800      	cmp	r0, #0
     738:	d105      	bne.n	746 <spi_read_buffer_wait+0x36>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     73a:	6830      	ldr	r0, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     73c:	6984      	ldr	r4, [r0, #24]
     73e:	07a5      	lsls	r5, r4, #30
     740:	d501      	bpl.n	746 <spi_read_buffer_wait+0x36>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     742:	2402      	movs	r4, #2
     744:	7604      	strb	r4, [r0, #24]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
     746:	4692      	mov	sl, r2
     748:	2700      	movs	r7, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     74a:	2404      	movs	r4, #4
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     74c:	2202      	movs	r2, #2
     74e:	4694      	mov	ip, r2

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     750:	4d33      	ldr	r5, [pc, #204]	; (820 <spi_read_buffer_wait+0x110>)
     752:	46a8      	mov	r8, r5
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     754:	2001      	movs	r0, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     756:	05db      	lsls	r3, r3, #23
     758:	0ddb      	lsrs	r3, r3, #23
     75a:	469b      	mov	fp, r3
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     75c:	46b9      	mov	r9, r7
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
     75e:	7973      	ldrb	r3, [r6, #5]
     760:	2b01      	cmp	r3, #1
     762:	d108      	bne.n	776 <spi_read_buffer_wait+0x66>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     764:	6835      	ldr	r5, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     766:	69ab      	ldr	r3, [r5, #24]
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
     768:	4203      	tst	r3, r0
     76a:	d0fc      	beq.n	766 <spi_read_buffer_wait+0x56>
     76c:	69ab      	ldr	r3, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     76e:	4203      	tst	r3, r0
     770:	d01a      	beq.n	7a8 <spi_read_buffer_wait+0x98>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     772:	465b      	mov	r3, fp
     774:	62ab      	str	r3, [r5, #40]	; 0x28
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     776:	7973      	ldrb	r3, [r6, #5]
     778:	2b00      	cmp	r3, #0
     77a:	d115      	bne.n	7a8 <spi_read_buffer_wait+0x98>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     77c:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     77e:	6993      	ldr	r3, [r2, #24]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     780:	4223      	tst	r3, r4
     782:	d106      	bne.n	792 <spi_read_buffer_wait+0x82>
     784:	4643      	mov	r3, r8
     786:	6995      	ldr	r5, [r2, #24]
     788:	4225      	tst	r5, r4
     78a:	d102      	bne.n	792 <spi_read_buffer_wait+0x82>
     78c:	3b01      	subs	r3, #1
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     78e:	2b00      	cmp	r3, #0
     790:	d1f9      	bne.n	786 <spi_read_buffer_wait+0x76>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     792:	6993      	ldr	r3, [r2, #24]
				if (spi_is_ready_to_read(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     794:	4665      	mov	r5, ip
     796:	422b      	tst	r3, r5
     798:	d003      	beq.n	7a2 <spi_read_buffer_wait+0x92>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     79a:	2302      	movs	r3, #2
     79c:	7613      	strb	r3, [r2, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     79e:	2004      	movs	r0, #4
     7a0:	e038      	b.n	814 <spi_read_buffer_wait+0x104>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     7a2:	6993      	ldr	r3, [r2, #24]
			}

			if (!spi_is_ready_to_read(module)) {
     7a4:	4223      	tst	r3, r4
     7a6:	d02e      	beq.n	806 <spi_read_buffer_wait+0xf6>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7a8:	6835      	ldr	r5, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     7aa:	69ab      	ldr	r3, [r5, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     7ac:	4223      	tst	r3, r4
     7ae:	d0fc      	beq.n	7aa <spi_read_buffer_wait+0x9a>
     7b0:	69ab      	ldr	r3, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     7b2:	4223      	tst	r3, r4
     7b4:	d029      	beq.n	80a <spi_read_buffer_wait+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     7b6:	69ab      	ldr	r3, [r5, #24]
     7b8:	0c1a      	lsrs	r2, r3, #16
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     7ba:	464b      	mov	r3, r9

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     7bc:	4214      	tst	r4, r2
     7be:	d005      	beq.n	7cc <spi_read_buffer_wait+0xbc>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     7c0:	69ab      	ldr	r3, [r5, #24]
     7c2:	0c1a      	lsrs	r2, r3, #16
     7c4:	2304      	movs	r3, #4
     7c6:	4313      	orrs	r3, r2
     7c8:	836b      	strh	r3, [r5, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     7ca:	231e      	movs	r3, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     7cc:	79b2      	ldrb	r2, [r6, #6]
     7ce:	2a01      	cmp	r2, #1
     7d0:	d103      	bne.n	7da <spi_read_buffer_wait+0xca>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     7d2:	6aad      	ldr	r5, [r5, #40]	; 0x28
     7d4:	05ed      	lsls	r5, r5, #23
     7d6:	0dea      	lsrs	r2, r5, #23
     7d8:	e001      	b.n	7de <spi_read_buffer_wait+0xce>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     7da:	6aad      	ldr	r5, [r5, #40]	; 0x28
     7dc:	b2ea      	uxtb	r2, r5
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
     7de:	2b00      	cmp	r3, #0
     7e0:	d115      	bne.n	80e <spi_read_buffer_wait+0xfe>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     7e2:	1c7b      	adds	r3, r7, #1
     7e4:	b29b      	uxth	r3, r3
     7e6:	55ca      	strb	r2, [r1, r7]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     7e8:	79b5      	ldrb	r5, [r6, #6]
     7ea:	2d01      	cmp	r5, #1
     7ec:	d103      	bne.n	7f6 <spi_read_buffer_wait+0xe6>
			rx_data[rx_pos++] = (received_data >> 8);
     7ee:	3702      	adds	r7, #2
     7f0:	0a15      	lsrs	r5, r2, #8
     7f2:	54cd      	strb	r5, [r1, r3]
     7f4:	b2bb      	uxth	r3, r7
     7f6:	4652      	mov	r2, sl
     7f8:	3a01      	subs	r2, #1
     7fa:	b292      	uxth	r2, r2
     7fc:	4692      	mov	sl, r2
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
     7fe:	2a00      	cmp	r2, #0
     800:	d007      	beq.n	812 <spi_read_buffer_wait+0x102>
     802:	1c1f      	adds	r7, r3, #0
     804:	e7ab      	b.n	75e <spi_read_buffer_wait+0x4e>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
     806:	2012      	movs	r0, #18
     808:	e004      	b.n	814 <spi_read_buffer_wait+0x104>
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
     80a:	2010      	movs	r0, #16
     80c:	e002      	b.n	814 <spi_read_buffer_wait+0x104>
     80e:	1c18      	adds	r0, r3, #0
     810:	e000      	b.n	814 <spi_read_buffer_wait+0x104>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
     812:	2000      	movs	r0, #0
}
     814:	bc3c      	pop	{r2, r3, r4, r5}
     816:	4690      	mov	r8, r2
     818:	4699      	mov	r9, r3
     81a:	46a2      	mov	sl, r4
     81c:	46ab      	mov	fp, r5
     81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     820:	00002710 	.word	0x00002710

00000824 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     824:	b5f0      	push	{r4, r5, r6, r7, lr}
     826:	465f      	mov	r7, fp
     828:	4656      	mov	r6, sl
     82a:	464d      	mov	r5, r9
     82c:	4644      	mov	r4, r8
     82e:	b4f0      	push	{r4, r5, r6, r7}
     830:	b083      	sub	sp, #12
     832:	1c04      	adds	r4, r0, #0
     834:	4692      	mov	sl, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     836:	6b80      	ldr	r0, [r0, #56]	; 0x38
     838:	b2c0      	uxtb	r0, r0
     83a:	2805      	cmp	r0, #5
     83c:	d100      	bne.n	840 <spi_write_buffer_wait+0x1c>
     83e:	e0f5      	b.n	a2c <spi_write_buffer_wait+0x208>
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     840:	2017      	movs	r0, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     842:	2a00      	cmp	r2, #0
     844:	d100      	bne.n	848 <spi_write_buffer_wait+0x24>
     846:	e0f1      	b.n	a2c <spi_write_buffer_wait+0x208>
		return STATUS_ERR_INVALID_ARG;
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     848:	7963      	ldrb	r3, [r4, #5]
     84a:	2b00      	cmp	r3, #0
     84c:	d105      	bne.n	85a <spi_write_buffer_wait+0x36>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     84e:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     850:	6998      	ldr	r0, [r3, #24]
     852:	0782      	lsls	r2, r0, #30
     854:	d501      	bpl.n	85a <spi_write_buffer_wait+0x36>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     856:	2002      	movs	r0, #2
     858:	7618      	strb	r0, [r3, #24]
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
     85a:	4655      	mov	r5, sl
     85c:	2000      	movs	r0, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     85e:	2301      	movs	r3, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     860:	2602      	movs	r6, #2
     862:	46b4      	mov	ip, r6
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     864:	2704      	movs	r7, #4
     866:	46bb      	mov	fp, r7
     868:	e091      	b.n	98e <spi_write_buffer_wait+0x16a>

	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     86a:	7962      	ldrb	r2, [r4, #5]
     86c:	2a00      	cmp	r2, #0
     86e:	d001      	beq.n	874 <spi_write_buffer_wait+0x50>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     870:	6826      	ldr	r6, [r4, #0]
     872:	e016      	b.n	8a2 <spi_write_buffer_wait+0x7e>
     874:	6822      	ldr	r2, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     876:	6996      	ldr	r6, [r2, #24]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
     878:	421e      	tst	r6, r3
     87a:	d106      	bne.n	88a <spi_write_buffer_wait+0x66>
     87c:	4e6f      	ldr	r6, [pc, #444]	; (a3c <spi_write_buffer_wait+0x218>)
     87e:	6997      	ldr	r7, [r2, #24]
     880:	421f      	tst	r7, r3
     882:	d102      	bne.n	88a <spi_write_buffer_wait+0x66>
     884:	3e01      	subs	r6, #1
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     886:	2e00      	cmp	r6, #0
     888:	d1f9      	bne.n	87e <spi_write_buffer_wait+0x5a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     88a:	6996      	ldr	r6, [r2, #24]
				if (spi_is_ready_to_write(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     88c:	4667      	mov	r7, ip
     88e:	423e      	tst	r6, r7
     890:	d003      	beq.n	89a <spi_write_buffer_wait+0x76>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     892:	2302      	movs	r3, #2
     894:	7613      	strb	r3, [r2, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     896:	2004      	movs	r0, #4
     898:	e0c8      	b.n	a2c <spi_write_buffer_wait+0x208>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     89a:	6992      	ldr	r2, [r2, #24]
			}

			if (!spi_is_ready_to_write(module)) {
     89c:	421a      	tst	r2, r3
     89e:	d1e7      	bne.n	870 <spi_write_buffer_wait+0x4c>
     8a0:	e0b7      	b.n	a12 <spi_write_buffer_wait+0x1ee>
     8a2:	69b2      	ldr	r2, [r6, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     8a4:	421a      	tst	r2, r3
     8a6:	d0fc      	beq.n	8a2 <spi_write_buffer_wait+0x7e>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     8a8:	1c42      	adds	r2, r0, #1
     8aa:	b292      	uxth	r2, r2
     8ac:	4690      	mov	r8, r2
     8ae:	5c0f      	ldrb	r7, [r1, r0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8b0:	79a2      	ldrb	r2, [r4, #6]
     8b2:	2a01      	cmp	r2, #1
     8b4:	d001      	beq.n	8ba <spi_write_buffer_wait+0x96>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     8b6:	4640      	mov	r0, r8
     8b8:	e005      	b.n	8c6 <spi_write_buffer_wait+0xa2>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     8ba:	3002      	adds	r0, #2
     8bc:	b280      	uxth	r0, r0
     8be:	4642      	mov	r2, r8
     8c0:	5c8a      	ldrb	r2, [r1, r2]
     8c2:	0212      	lsls	r2, r2, #8
     8c4:	4317      	orrs	r7, r2
     8c6:	69b2      	ldr	r2, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     8c8:	421a      	tst	r2, r3
     8ca:	d002      	beq.n	8d2 <spi_write_buffer_wait+0xae>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8cc:	05ff      	lsls	r7, r7, #23
     8ce:	0dff      	lsrs	r7, r7, #23
     8d0:	62b7      	str	r7, [r6, #40]	; 0x28
     8d2:	1e6a      	subs	r2, r5, #1
     8d4:	b296      	uxth	r6, r2
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     8d6:	79e2      	ldrb	r2, [r4, #7]
     8d8:	2a00      	cmp	r2, #0
     8da:	d101      	bne.n	8e0 <spi_write_buffer_wait+0xbc>
     8dc:	1c35      	adds	r5, r6, #0
     8de:	e058      	b.n	992 <spi_write_buffer_wait+0x16e>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     8e0:	7962      	ldrb	r2, [r4, #5]
     8e2:	2a00      	cmp	r2, #0
     8e4:	d137      	bne.n	956 <spi_write_buffer_wait+0x132>
     8e6:	4a56      	ldr	r2, [pc, #344]	; (a40 <spi_write_buffer_wait+0x21c>)
     8e8:	9101      	str	r1, [sp, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8ea:	6826      	ldr	r6, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8ec:	69b7      	ldr	r7, [r6, #24]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
     8ee:	421f      	tst	r7, r3
     8f0:	d01c      	beq.n	92c <spi_write_buffer_wait+0x108>
						data_to_send = tx_data[tx_pos++];
     8f2:	1c47      	adds	r7, r0, #1
     8f4:	b2bf      	uxth	r7, r7
     8f6:	46b9      	mov	r9, r7
     8f8:	9901      	ldr	r1, [sp, #4]
     8fa:	5c09      	ldrb	r1, [r1, r0]
     8fc:	4688      	mov	r8, r1
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8fe:	79a7      	ldrb	r7, [r4, #6]
     900:	2f01      	cmp	r7, #1
     902:	d001      	beq.n	908 <spi_write_buffer_wait+0xe4>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
     904:	4648      	mov	r0, r9
     906:	e008      	b.n	91a <spi_write_buffer_wait+0xf6>
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
							data_to_send |= (tx_data[tx_pos++] << 8);
     908:	3002      	adds	r0, #2
     90a:	b280      	uxth	r0, r0
     90c:	9901      	ldr	r1, [sp, #4]
     90e:	464f      	mov	r7, r9
     910:	5dc9      	ldrb	r1, [r1, r7]
     912:	0209      	lsls	r1, r1, #8
     914:	4647      	mov	r7, r8
     916:	430f      	orrs	r7, r1
     918:	46b8      	mov	r8, r7
     91a:	69b7      	ldr	r7, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     91c:	421f      	tst	r7, r3
     91e:	d003      	beq.n	928 <spi_write_buffer_wait+0x104>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     920:	4647      	mov	r7, r8
     922:	05f9      	lsls	r1, r7, #23
     924:	0dcf      	lsrs	r7, r1, #23
     926:	62b7      	str	r7, [r6, #40]	; 0x28
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
     928:	3d01      	subs	r5, #1
     92a:	b2ad      	uxth	r5, r5
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     92c:	6826      	ldr	r6, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     92e:	69b7      	ldr	r7, [r6, #24]
					}
					if (spi_is_ready_to_read(module)) {
     930:	4659      	mov	r1, fp
     932:	420f      	tst	r7, r1
     934:	d102      	bne.n	93c <spi_write_buffer_wait+0x118>
     936:	3a01      	subs	r2, #1

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     938:	2a00      	cmp	r2, #0
     93a:	d1d6      	bne.n	8ea <spi_write_buffer_wait+0xc6>
     93c:	9901      	ldr	r1, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     93e:	69b2      	ldr	r2, [r6, #24]
						break;
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
     940:	4667      	mov	r7, ip
     942:	423a      	tst	r2, r7
     944:	d003      	beq.n	94e <spi_write_buffer_wait+0x12a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     946:	2302      	movs	r3, #2
     948:	7633      	strb	r3, [r6, #24]
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
					_spi_clear_tx_complete_flag(module);
					return STATUS_ABORTED;
     94a:	2004      	movs	r0, #4
     94c:	e06e      	b.n	a2c <spi_write_buffer_wait+0x208>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     94e:	69b2      	ldr	r2, [r6, #24]
				}

				if (!spi_is_ready_to_read(module)) {
     950:	465e      	mov	r6, fp
     952:	4232      	tst	r2, r6
     954:	d05f      	beq.n	a16 <spi_write_buffer_wait+0x1f2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     956:	6826      	ldr	r6, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     958:	69b2      	ldr	r2, [r6, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     95a:	465f      	mov	r7, fp
     95c:	423a      	tst	r2, r7
     95e:	d0fb      	beq.n	958 <spi_write_buffer_wait+0x134>
     960:	69b2      	ldr	r2, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     962:	423a      	tst	r2, r7
     964:	d00f      	beq.n	986 <spi_write_buffer_wait+0x162>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     966:	69b2      	ldr	r2, [r6, #24]
     968:	0c12      	lsrs	r2, r2, #16
     96a:	4217      	tst	r7, r2
     96c:	d005      	beq.n	97a <spi_write_buffer_wait+0x156>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     96e:	69b2      	ldr	r2, [r6, #24]
     970:	0c12      	lsrs	r2, r2, #16
     972:	2704      	movs	r7, #4
     974:	433a      	orrs	r2, r7
     976:	b292      	uxth	r2, r2
     978:	8372      	strh	r2, [r6, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     97a:	79a2      	ldrb	r2, [r4, #6]
     97c:	2a01      	cmp	r2, #1
     97e:	d101      	bne.n	984 <spi_write_buffer_wait+0x160>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     980:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     982:	e000      	b.n	986 <spi_write_buffer_wait+0x162>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     984:	6ab2      	ldr	r2, [r6, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     986:	4652      	mov	r2, sl
     988:	3a01      	subs	r2, #1
     98a:	b292      	uxth	r2, r2
     98c:	4692      	mov	sl, r2
     98e:	3d01      	subs	r5, #1
     990:	b2ad      	uxth	r5, r5

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     992:	4a2c      	ldr	r2, [pc, #176]	; (a44 <spi_write_buffer_wait+0x220>)
     994:	4295      	cmp	r5, r2
     996:	d000      	beq.n	99a <spi_write_buffer_wait+0x176>
     998:	e767      	b.n	86a <spi_write_buffer_wait+0x46>
     99a:	4651      	mov	r1, sl
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     99c:	7963      	ldrb	r3, [r4, #5]
     99e:	2b01      	cmp	r3, #1
     9a0:	d105      	bne.n	9ae <spi_write_buffer_wait+0x18a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9a2:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     9a4:	2202      	movs	r2, #2
     9a6:	698b      	ldr	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     9a8:	4213      	tst	r3, r2
     9aa:	d0fc      	beq.n	9a6 <spi_write_buffer_wait+0x182>
     9ac:	e035      	b.n	a1a <spi_write_buffer_wait+0x1f6>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     9ae:	2b00      	cmp	r3, #0
     9b0:	d135      	bne.n	a1e <spi_write_buffer_wait+0x1fa>
		if (module->receiver_enabled) {
     9b2:	79e3      	ldrb	r3, [r4, #7]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     9b4:	2000      	movs	r0, #0
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
     9b6:	2b00      	cmp	r3, #0
     9b8:	d038      	beq.n	a2c <spi_write_buffer_wait+0x208>
			while (flush_length) {
     9ba:	2900      	cmp	r1, #0
     9bc:	d031      	beq.n	a22 <spi_write_buffer_wait+0x1fe>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     9be:	2504      	movs	r5, #4
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
     9c0:	4e1e      	ldr	r6, [pc, #120]	; (a3c <spi_write_buffer_wait+0x218>)

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     9c2:	2704      	movs	r7, #4
     9c4:	4650      	mov	r0, sl
     9c6:	e01e      	b.n	a06 <spi_write_buffer_wait+0x1e2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     9c8:	698a      	ldr	r2, [r1, #24]
     9ca:	422a      	tst	r2, r5
     9cc:	d102      	bne.n	9d4 <spi_write_buffer_wait+0x1b0>
     9ce:	3b01      	subs	r3, #1
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     9d0:	2b00      	cmp	r3, #0
     9d2:	d1f9      	bne.n	9c8 <spi_write_buffer_wait+0x1a4>
     9d4:	698b      	ldr	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
     9d6:	422b      	tst	r3, r5
     9d8:	d025      	beq.n	a26 <spi_write_buffer_wait+0x202>
     9da:	698b      	ldr	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     9dc:	422b      	tst	r3, r5
     9de:	d00e      	beq.n	9fe <spi_write_buffer_wait+0x1da>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     9e0:	698b      	ldr	r3, [r1, #24]
     9e2:	0c1b      	lsrs	r3, r3, #16
     9e4:	421d      	tst	r5, r3
     9e6:	d004      	beq.n	9f2 <spi_write_buffer_wait+0x1ce>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     9e8:	698b      	ldr	r3, [r1, #24]
     9ea:	0c1b      	lsrs	r3, r3, #16
     9ec:	433b      	orrs	r3, r7
     9ee:	b29b      	uxth	r3, r3
     9f0:	834b      	strh	r3, [r1, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     9f2:	79a3      	ldrb	r3, [r4, #6]
     9f4:	2b01      	cmp	r3, #1
     9f6:	d101      	bne.n	9fc <spi_write_buffer_wait+0x1d8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     9f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     9fa:	e000      	b.n	9fe <spi_write_buffer_wait+0x1da>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     9fc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
					return STATUS_ERR_TIMEOUT;
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
				flush_length--;
     9fe:	3801      	subs	r0, #1
     a00:	b280      	uxth	r0, r0
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
     a02:	2800      	cmp	r0, #0
     a04:	d011      	beq.n	a2a <spi_write_buffer_wait+0x206>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a06:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     a08:	698b      	ldr	r3, [r1, #24]
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
     a0a:	422b      	tst	r3, r5
     a0c:	d1e2      	bne.n	9d4 <spi_write_buffer_wait+0x1b0>
     a0e:	1c33      	adds	r3, r6, #0
     a10:	e7da      	b.n	9c8 <spi_write_buffer_wait+0x1a4>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     a12:	2012      	movs	r0, #18
     a14:	e00a      	b.n	a2c <spi_write_buffer_wait+0x208>
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
     a16:	2012      	movs	r0, #18
     a18:	e008      	b.n	a2c <spi_write_buffer_wait+0x208>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     a1a:	2000      	movs	r0, #0
     a1c:	e006      	b.n	a2c <spi_write_buffer_wait+0x208>
     a1e:	2000      	movs	r0, #0
     a20:	e004      	b.n	a2c <spi_write_buffer_wait+0x208>
     a22:	2000      	movs	r0, #0
     a24:	e002      	b.n	a2c <spi_write_buffer_wait+0x208>
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
     a26:	2012      	movs	r0, #18
     a28:	e000      	b.n	a2c <spi_write_buffer_wait+0x208>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     a2a:	2000      	movs	r0, #0
}
     a2c:	b003      	add	sp, #12
     a2e:	bc3c      	pop	{r2, r3, r4, r5}
     a30:	4690      	mov	r8, r2
     a32:	4699      	mov	r9, r3
     a34:	46a2      	mov	sl, r4
     a36:	46ab      	mov	fp, r5
     a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	00002710 	.word	0x00002710
     a40:	00002711 	.word	0x00002711
     a44:	0000ffff 	.word	0x0000ffff

00000a48 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a48:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4a:	465f      	mov	r7, fp
     a4c:	4656      	mov	r6, sl
     a4e:	464d      	mov	r5, r9
     a50:	4644      	mov	r4, r8
     a52:	b4f0      	push	{r4, r5, r6, r7}
     a54:	b091      	sub	sp, #68	; 0x44
     a56:	1c05      	adds	r5, r0, #0
     a58:	1c0c      	adds	r4, r1, #0
     a5a:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a5c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a5e:	1c08      	adds	r0, r1, #0
     a60:	4bab      	ldr	r3, [pc, #684]	; (d10 <usart_init+0x2c8>)
     a62:	4798      	blx	r3
     a64:	1c02      	adds	r2, r0, #0
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a66:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     a68:	2005      	movs	r0, #5

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a6a:	07d9      	lsls	r1, r3, #31
     a6c:	d500      	bpl.n	a70 <usart_init+0x28>
     a6e:	e147      	b.n	d00 <usart_init+0x2b8>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a70:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     a72:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a74:	079f      	lsls	r7, r3, #30
     a76:	d500      	bpl.n	a7a <usart_init+0x32>
     a78:	e142      	b.n	d00 <usart_init+0x2b8>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a7a:	4ba6      	ldr	r3, [pc, #664]	; (d14 <usart_init+0x2cc>)
     a7c:	6a18      	ldr	r0, [r3, #32]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a7e:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a80:	2701      	movs	r7, #1
     a82:	408f      	lsls	r7, r1
     a84:	1c39      	adds	r1, r7, #0
     a86:	4301      	orrs	r1, r0
     a88:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     a8a:	a90f      	add	r1, sp, #60	; 0x3c
     a8c:	272d      	movs	r7, #45	; 0x2d
     a8e:	5df3      	ldrb	r3, [r6, r7]
     a90:	700b      	strb	r3, [r1, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a92:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a94:	b2d2      	uxtb	r2, r2
     a96:	4690      	mov	r8, r2
     a98:	1c10      	adds	r0, r2, #0
     a9a:	4b9f      	ldr	r3, [pc, #636]	; (d18 <usart_init+0x2d0>)
     a9c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a9e:	4640      	mov	r0, r8
     aa0:	4b9e      	ldr	r3, [pc, #632]	; (d1c <usart_init+0x2d4>)
     aa2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     aa4:	5df0      	ldrb	r0, [r6, r7]
     aa6:	2100      	movs	r1, #0
     aa8:	4b9d      	ldr	r3, [pc, #628]	; (d20 <usart_init+0x2d8>)
     aaa:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     aac:	7af3      	ldrb	r3, [r6, #11]
     aae:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     ab0:	2324      	movs	r3, #36	; 0x24
     ab2:	5cf3      	ldrb	r3, [r6, r3]
     ab4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     ab6:	2325      	movs	r3, #37	; 0x25
     ab8:	5cf3      	ldrb	r3, [r6, r3]
     aba:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     abc:	7ef3      	ldrb	r3, [r6, #27]
     abe:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     ac0:	7f33      	ldrb	r3, [r6, #28]
     ac2:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ac4:	6829      	ldr	r1, [r5, #0]
     ac6:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ac8:	1c08      	adds	r0, r1, #0
     aca:	4b91      	ldr	r3, [pc, #580]	; (d10 <usart_init+0x2c8>)
     acc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ace:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     ad0:	2200      	movs	r2, #0
     ad2:	466b      	mov	r3, sp
     ad4:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     ad6:	8a32      	ldrh	r2, [r6, #16]
     ad8:	9202      	str	r2, [sp, #8]
     ada:	2380      	movs	r3, #128	; 0x80
     adc:	01db      	lsls	r3, r3, #7
     ade:	429a      	cmp	r2, r3
     ae0:	d021      	beq.n	b26 <usart_init+0xde>
     ae2:	2380      	movs	r3, #128	; 0x80
     ae4:	01db      	lsls	r3, r3, #7
     ae6:	429a      	cmp	r2, r3
     ae8:	d804      	bhi.n	af4 <usart_init+0xac>
     aea:	2380      	movs	r3, #128	; 0x80
     aec:	019b      	lsls	r3, r3, #6
     aee:	429a      	cmp	r2, r3
     af0:	d011      	beq.n	b16 <usart_init+0xce>
     af2:	e008      	b.n	b06 <usart_init+0xbe>
     af4:	23c0      	movs	r3, #192	; 0xc0
     af6:	01db      	lsls	r3, r3, #7
     af8:	9f02      	ldr	r7, [sp, #8]
     afa:	429f      	cmp	r7, r3
     afc:	d00f      	beq.n	b1e <usart_init+0xd6>
     afe:	2380      	movs	r3, #128	; 0x80
     b00:	021b      	lsls	r3, r3, #8
     b02:	429f      	cmp	r7, r3
     b04:	d003      	beq.n	b0e <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b06:	2710      	movs	r7, #16
     b08:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b0a:	2700      	movs	r7, #0
     b0c:	e00e      	b.n	b2c <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b0e:	2703      	movs	r7, #3
     b10:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b12:	2700      	movs	r7, #0
     b14:	e00a      	b.n	b2c <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b16:	2710      	movs	r7, #16
     b18:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b1a:	2701      	movs	r7, #1
     b1c:	e006      	b.n	b2c <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b1e:	2708      	movs	r7, #8
     b20:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b22:	2701      	movs	r7, #1
     b24:	e002      	b.n	b2c <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b26:	2708      	movs	r7, #8
     b28:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b2a:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     b2c:	6831      	ldr	r1, [r6, #0]
     b2e:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     b30:	68f2      	ldr	r2, [r6, #12]
     b32:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     b34:	6973      	ldr	r3, [r6, #20]
     b36:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b38:	7e31      	ldrb	r1, [r6, #24]
     b3a:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b3c:	2326      	movs	r3, #38	; 0x26
     b3e:	5cf3      	ldrb	r3, [r6, r3]
     b40:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     b42:	6873      	ldr	r3, [r6, #4]
     b44:	2b00      	cmp	r3, #0
     b46:	d013      	beq.n	b70 <usart_init+0x128>
     b48:	2280      	movs	r2, #128	; 0x80
     b4a:	0552      	lsls	r2, r2, #21
     b4c:	4293      	cmp	r3, r2
     b4e:	d12e      	bne.n	bae <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     b50:	2327      	movs	r3, #39	; 0x27
     b52:	5cf3      	ldrb	r3, [r6, r3]
     b54:	2b00      	cmp	r3, #0
     b56:	d12e      	bne.n	bb6 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     b58:	6a37      	ldr	r7, [r6, #32]
     b5a:	b2c0      	uxtb	r0, r0
     b5c:	4b71      	ldr	r3, [pc, #452]	; (d24 <usart_init+0x2dc>)
     b5e:	4798      	blx	r3
     b60:	1c01      	adds	r1, r0, #0
     b62:	1c38      	adds	r0, r7, #0
     b64:	466a      	mov	r2, sp
     b66:	3226      	adds	r2, #38	; 0x26
     b68:	4b6f      	ldr	r3, [pc, #444]	; (d28 <usart_init+0x2e0>)
     b6a:	4798      	blx	r3
     b6c:	1c03      	adds	r3, r0, #0
     b6e:	e01f      	b.n	bb0 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     b70:	2327      	movs	r3, #39	; 0x27
     b72:	5cf3      	ldrb	r3, [r6, r3]
     b74:	2b00      	cmp	r3, #0
     b76:	d00a      	beq.n	b8e <usart_init+0x146>
				status_code =
     b78:	9a06      	ldr	r2, [sp, #24]
     b7a:	9200      	str	r2, [sp, #0]
     b7c:	6a30      	ldr	r0, [r6, #32]
     b7e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     b80:	466a      	mov	r2, sp
     b82:	3226      	adds	r2, #38	; 0x26
     b84:	1c3b      	adds	r3, r7, #0
     b86:	4f69      	ldr	r7, [pc, #420]	; (d2c <usart_init+0x2e4>)
     b88:	47b8      	blx	r7
     b8a:	1c03      	adds	r3, r0, #0
     b8c:	e010      	b.n	bb0 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     b8e:	6a31      	ldr	r1, [r6, #32]
     b90:	9107      	str	r1, [sp, #28]
     b92:	b2c0      	uxtb	r0, r0
     b94:	4b63      	ldr	r3, [pc, #396]	; (d24 <usart_init+0x2dc>)
     b96:	4798      	blx	r3
     b98:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     b9a:	9a06      	ldr	r2, [sp, #24]
     b9c:	9200      	str	r2, [sp, #0]
     b9e:	9807      	ldr	r0, [sp, #28]
     ba0:	466a      	mov	r2, sp
     ba2:	3226      	adds	r2, #38	; 0x26
     ba4:	1c3b      	adds	r3, r7, #0
     ba6:	4f61      	ldr	r7, [pc, #388]	; (d2c <usart_init+0x2e4>)
     ba8:	47b8      	blx	r7
     baa:	1c03      	adds	r3, r0, #0
     bac:	e000      	b.n	bb0 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     bae:	2300      	movs	r3, #0
     bb0:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baud rate failed */
	if (status_code != STATUS_OK) {
     bb2:	d000      	beq.n	bb6 <usart_init+0x16e>
     bb4:	e0a4      	b.n	d00 <usart_init+0x2b8>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     bb6:	7e73      	ldrb	r3, [r6, #25]
     bb8:	2b00      	cmp	r3, #0
     bba:	d002      	beq.n	bc2 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     bbc:	7eb3      	ldrb	r3, [r6, #26]
     bbe:	4641      	mov	r1, r8
     bc0:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     bc2:	682a      	ldr	r2, [r5, #0]
     bc4:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bc6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     bc8:	2b00      	cmp	r3, #0
     bca:	d1fc      	bne.n	bc6 <usart_init+0x17e>
     bcc:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     bce:	466b      	mov	r3, sp
     bd0:	3326      	adds	r3, #38	; 0x26
     bd2:	881b      	ldrh	r3, [r3, #0]
     bd4:	4642      	mov	r2, r8
     bd6:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     bd8:	464b      	mov	r3, r9
     bda:	9f03      	ldr	r7, [sp, #12]
     bdc:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     bde:	9f04      	ldr	r7, [sp, #16]
     be0:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     be2:	6871      	ldr	r1, [r6, #4]
     be4:	430b      	orrs	r3, r1
		config->sample_rate |
     be6:	9f02      	ldr	r7, [sp, #8]
     be8:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bea:	4652      	mov	r2, sl
     bec:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     bee:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bf0:	4659      	mov	r1, fp
     bf2:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     bf4:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     bf6:	2327      	movs	r3, #39	; 0x27
     bf8:	5cf3      	ldrb	r3, [r6, r3]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d101      	bne.n	c02 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
     bfe:	2304      	movs	r3, #4
     c00:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c02:	7e71      	ldrb	r1, [r6, #25]
     c04:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c06:	7f33      	ldrb	r3, [r6, #28]
     c08:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     c0a:	4319      	orrs	r1, r3
     c0c:	7af2      	ldrb	r2, [r6, #11]
     c0e:	7ab3      	ldrb	r3, [r6, #10]
     c10:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c12:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c14:	7f73      	ldrb	r3, [r6, #29]
     c16:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c18:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c1a:	2324      	movs	r3, #36	; 0x24
     c1c:	5cf3      	ldrb	r3, [r6, r3]
     c1e:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c20:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c22:	2325      	movs	r3, #37	; 0x25
     c24:	5cf3      	ldrb	r3, [r6, r3]
     c26:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     c28:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     c2a:	8933      	ldrh	r3, [r6, #8]
     c2c:	2bff      	cmp	r3, #255	; 0xff
     c2e:	d007      	beq.n	c40 <usart_init+0x1f8>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     c30:	7ef2      	ldrb	r2, [r6, #27]
     c32:	2a00      	cmp	r2, #0
     c34:	d002      	beq.n	c3c <usart_init+0x1f4>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     c36:	22a0      	movs	r2, #160	; 0xa0
     c38:	04d2      	lsls	r2, r2, #19
     c3a:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     c3c:	4319      	orrs	r1, r3
     c3e:	e005      	b.n	c4c <usart_init+0x204>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     c40:	7ef3      	ldrb	r3, [r6, #27]
     c42:	2b00      	cmp	r3, #0
     c44:	d002      	beq.n	c4c <usart_init+0x204>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     c46:	2380      	movs	r3, #128	; 0x80
     c48:	04db      	lsls	r3, r3, #19
     c4a:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     c4c:	232c      	movs	r3, #44	; 0x2c
     c4e:	5cf3      	ldrb	r3, [r6, r3]
     c50:	2b00      	cmp	r3, #0
     c52:	d103      	bne.n	c5c <usart_init+0x214>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c54:	4b36      	ldr	r3, [pc, #216]	; (d30 <usart_init+0x2e8>)
     c56:	681b      	ldr	r3, [r3, #0]
     c58:	039a      	lsls	r2, r3, #14
     c5a:	d501      	bpl.n	c60 <usart_init+0x218>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c5c:	2380      	movs	r3, #128	; 0x80
     c5e:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c60:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c62:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     c64:	2b00      	cmp	r3, #0
     c66:	d1fc      	bne.n	c62 <usart_init+0x21a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     c68:	4643      	mov	r3, r8
     c6a:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c6c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c6e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     c70:	2b00      	cmp	r3, #0
     c72:	d1fc      	bne.n	c6e <usart_init+0x226>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     c74:	4641      	mov	r1, r8
     c76:	600f      	str	r7, [r1, #0]
     c78:	ab0e      	add	r3, sp, #56	; 0x38
     c7a:	2280      	movs	r2, #128	; 0x80
     c7c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c7e:	2200      	movs	r2, #0
     c80:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c82:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c84:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     c86:	6b32      	ldr	r2, [r6, #48]	; 0x30
     c88:	920a      	str	r2, [sp, #40]	; 0x28
     c8a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     c8c:	930b      	str	r3, [sp, #44]	; 0x2c
     c8e:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     c90:	970c      	str	r7, [sp, #48]	; 0x30
     c92:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     c94:	960d      	str	r6, [sp, #52]	; 0x34
     c96:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c98:	ae0e      	add	r6, sp, #56	; 0x38
     c9a:	b2f9      	uxtb	r1, r7
     c9c:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c9e:	aa0a      	add	r2, sp, #40	; 0x28
     ca0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     ca2:	2800      	cmp	r0, #0
     ca4:	d102      	bne.n	cac <usart_init+0x264>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ca6:	1c20      	adds	r0, r4, #0
     ca8:	4a22      	ldr	r2, [pc, #136]	; (d34 <usart_init+0x2ec>)
     caa:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     cac:	1c43      	adds	r3, r0, #1
     cae:	d005      	beq.n	cbc <usart_init+0x274>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cb0:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     cb2:	0c00      	lsrs	r0, r0, #16
     cb4:	b2c0      	uxtb	r0, r0
     cb6:	1c31      	adds	r1, r6, #0
     cb8:	4a1f      	ldr	r2, [pc, #124]	; (d38 <usart_init+0x2f0>)
     cba:	4790      	blx	r2
     cbc:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     cbe:	2f04      	cmp	r7, #4
     cc0:	d1eb      	bne.n	c9a <usart_init+0x252>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     cc2:	2300      	movs	r3, #0
     cc4:	60eb      	str	r3, [r5, #12]
     cc6:	612b      	str	r3, [r5, #16]
     cc8:	616b      	str	r3, [r5, #20]
     cca:	61ab      	str	r3, [r5, #24]
     ccc:	61eb      	str	r3, [r5, #28]
     cce:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     cd0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     cd2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     cd4:	2200      	movs	r2, #0
     cd6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     cd8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     cda:	2330      	movs	r3, #48	; 0x30
     cdc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     cde:	2331      	movs	r3, #49	; 0x31
     ce0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     ce2:	2332      	movs	r3, #50	; 0x32
     ce4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     ce6:	2333      	movs	r3, #51	; 0x33
     ce8:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     cea:	6828      	ldr	r0, [r5, #0]
     cec:	4b08      	ldr	r3, [pc, #32]	; (d10 <usart_init+0x2c8>)
     cee:	4798      	blx	r3
     cf0:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     cf2:	4912      	ldr	r1, [pc, #72]	; (d3c <usart_init+0x2f4>)
     cf4:	4b12      	ldr	r3, [pc, #72]	; (d40 <usart_init+0x2f8>)
     cf6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     cf8:	00a4      	lsls	r4, r4, #2
     cfa:	4b12      	ldr	r3, [pc, #72]	; (d44 <usart_init+0x2fc>)
     cfc:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     cfe:	2000      	movs	r0, #0
}
     d00:	b011      	add	sp, #68	; 0x44
     d02:	bc3c      	pop	{r2, r3, r4, r5}
     d04:	4690      	mov	r8, r2
     d06:	4699      	mov	r9, r3
     d08:	46a2      	mov	sl, r4
     d0a:	46ab      	mov	fp, r5
     d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	0000060d 	.word	0x0000060d
     d14:	40000400 	.word	0x40000400
     d18:	000013f1 	.word	0x000013f1
     d1c:	00001361 	.word	0x00001361
     d20:	00000431 	.word	0x00000431
     d24:	0000140d 	.word	0x0000140d
     d28:	00000349 	.word	0x00000349
     d2c:	00000379 	.word	0x00000379
     d30:	41002000 	.word	0x41002000
     d34:	00000481 	.word	0x00000481
     d38:	000014cd 	.word	0x000014cd
     d3c:	00000e31 	.word	0x00000e31
     d40:	00000649 	.word	0x00000649
     d44:	2000049c 	.word	0x2000049c

00000d48 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     d48:	b510      	push	{r4, lr}
     d4a:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d4c:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d4e:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     d50:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d52:	2c00      	cmp	r4, #0
     d54:	d00d      	beq.n	d72 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     d56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     d58:	0c12      	lsrs	r2, r2, #16
		return STATUS_BUSY;
     d5a:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     d5c:	2a00      	cmp	r2, #0
     d5e:	d108      	bne.n	d72 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d60:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     d62:	2a00      	cmp	r2, #0
     d64:	d1fc      	bne.n	d60 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     d66:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     d68:	2102      	movs	r1, #2
     d6a:	699a      	ldr	r2, [r3, #24]
     d6c:	420a      	tst	r2, r1
     d6e:	d0fc      	beq.n	d6a <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     d70:	2000      	movs	r0, #0
}
     d72:	bd10      	pop	{r4, pc}

00000d74 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     d74:	b5f0      	push	{r4, r5, r6, r7, lr}
     d76:	4657      	mov	r7, sl
     d78:	464e      	mov	r6, r9
     d7a:	4645      	mov	r5, r8
     d7c:	b4e0      	push	{r5, r6, r7}
     d7e:	1c06      	adds	r6, r0, #0
     d80:	4688      	mov	r8, r1
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     d82:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     d84:	2a00      	cmp	r2, #0
     d86:	d04a      	beq.n	e1e <usart_write_buffer_wait+0xaa>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d88:	79f3      	ldrb	r3, [r6, #7]
		return STATUS_ERR_DENIED;
     d8a:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d8c:	2b00      	cmp	r3, #0
     d8e:	d046      	beq.n	e1e <usart_write_buffer_wait+0xaa>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d90:	6834      	ldr	r4, [r6, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d92:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     d94:	2b00      	cmp	r3, #0
     d96:	d1fc      	bne.n	d92 <usart_write_buffer_wait+0x1e>
     d98:	4692      	mov	sl, r2
     d9a:	2700      	movs	r7, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     d9c:	2501      	movs	r5, #1
     d9e:	4a22      	ldr	r2, [pc, #136]	; (e28 <usart_write_buffer_wait+0xb4>)
     da0:	4691      	mov	r9, r2
     da2:	e01f      	b.n	de4 <usart_write_buffer_wait+0x70>
     da4:	69a2      	ldr	r2, [r4, #24]
     da6:	422a      	tst	r2, r5
     da8:	d104      	bne.n	db4 <usart_write_buffer_wait+0x40>
				break;
			} else if (i == USART_TIMEOUT) {
     daa:	2b01      	cmp	r3, #1
     dac:	d029      	beq.n	e02 <usart_write_buffer_wait+0x8e>
     dae:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     db0:	2b00      	cmp	r3, #0
     db2:	d1f7      	bne.n	da4 <usart_write_buffer_wait+0x30>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     db4:	1c7b      	adds	r3, r7, #1
     db6:	b29b      	uxth	r3, r3
     db8:	4642      	mov	r2, r8
     dba:	5dd1      	ldrb	r1, [r2, r7]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     dbc:	7972      	ldrb	r2, [r6, #5]
     dbe:	2a01      	cmp	r2, #1
     dc0:	d001      	beq.n	dc6 <usart_write_buffer_wait+0x52>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     dc2:	1c1f      	adds	r7, r3, #0
     dc4:	e005      	b.n	dd2 <usart_write_buffer_wait+0x5e>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     dc6:	1cba      	adds	r2, r7, #2
     dc8:	b297      	uxth	r7, r2
     dca:	4642      	mov	r2, r8
     dcc:	5cd3      	ldrb	r3, [r2, r3]
     dce:	021b      	lsls	r3, r3, #8
     dd0:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     dd2:	1c30      	adds	r0, r6, #0
     dd4:	4b15      	ldr	r3, [pc, #84]	; (e2c <usart_write_buffer_wait+0xb8>)
     dd6:	4798      	blx	r3
     dd8:	4653      	mov	r3, sl
     dda:	3b01      	subs	r3, #1
     ddc:	b29b      	uxth	r3, r3
     dde:	469a      	mov	sl, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
     de0:	2b00      	cmp	r3, #0
     de2:	d016      	beq.n	e12 <usart_write_buffer_wait+0x9e>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     de4:	69a3      	ldr	r3, [r4, #24]
     de6:	422b      	tst	r3, r5
     de8:	d1e4      	bne.n	db4 <usart_write_buffer_wait+0x40>
     dea:	464b      	mov	r3, r9
     dec:	e7da      	b.n	da4 <usart_write_buffer_wait+0x30>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     dee:	69a2      	ldr	r2, [r4, #24]
     df0:	420a      	tst	r2, r1
     df2:	d108      	bne.n	e06 <usart_write_buffer_wait+0x92>
			break;
		} else if (i == USART_TIMEOUT) {
     df4:	2b01      	cmp	r3, #1
     df6:	d008      	beq.n	e0a <usart_write_buffer_wait+0x96>
     df8:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     dfa:	2b00      	cmp	r3, #0
     dfc:	d1f7      	bne.n	dee <usart_write_buffer_wait+0x7a>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     dfe:	2000      	movs	r0, #0
     e00:	e00d      	b.n	e1e <usart_write_buffer_wait+0xaa>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     e02:	2012      	movs	r0, #18
     e04:	e00b      	b.n	e1e <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     e06:	2000      	movs	r0, #0
     e08:	e009      	b.n	e1e <usart_write_buffer_wait+0xaa>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
     e0a:	2012      	movs	r0, #18
     e0c:	e007      	b.n	e1e <usart_write_buffer_wait+0xaa>
		}
	}

	return STATUS_OK;
     e0e:	2000      	movs	r0, #0
     e10:	e005      	b.n	e1e <usart_write_buffer_wait+0xaa>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     e12:	69a3      	ldr	r3, [r4, #24]
     e14:	079a      	lsls	r2, r3, #30
     e16:	d4fa      	bmi.n	e0e <usart_write_buffer_wait+0x9a>
     e18:	4b03      	ldr	r3, [pc, #12]	; (e28 <usart_write_buffer_wait+0xb4>)
     e1a:	2102      	movs	r1, #2
     e1c:	e7e7      	b.n	dee <usart_write_buffer_wait+0x7a>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     e1e:	bc1c      	pop	{r2, r3, r4}
     e20:	4690      	mov	r8, r2
     e22:	4699      	mov	r9, r3
     e24:	46a2      	mov	sl, r4
     e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e28:	0000ffff 	.word	0x0000ffff
     e2c:	00000d49 	.word	0x00000d49

00000e30 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     e32:	0080      	lsls	r0, r0, #2
     e34:	4b68      	ldr	r3, [pc, #416]	; (fd8 <_usart_interrupt_handler+0x1a8>)
     e36:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     e38:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     e3a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     e3c:	2b00      	cmp	r3, #0
     e3e:	d1fc      	bne.n	e3a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     e40:	69a3      	ldr	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     e42:	6966      	ldr	r6, [r4, #20]
     e44:	0236      	lsls	r6, r6, #8
     e46:	0e36      	lsrs	r6, r6, #24
     e48:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     e4a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     e4c:	5ceb      	ldrb	r3, [r5, r3]
     e4e:	2230      	movs	r2, #48	; 0x30
     e50:	5caf      	ldrb	r7, [r5, r2]
     e52:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     e54:	07f1      	lsls	r1, r6, #31
     e56:	d520      	bpl.n	e9a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     e58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     e5a:	0c1b      	lsrs	r3, r3, #16
     e5c:	d01b      	beq.n	e96 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
     e60:	781a      	ldrb	r2, [r3, #0]
     e62:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     e64:	1c59      	adds	r1, r3, #1
     e66:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e68:	7969      	ldrb	r1, [r5, #5]
     e6a:	2901      	cmp	r1, #1
     e6c:	d104      	bne.n	e78 <_usart_interrupt_handler+0x48>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     e6e:	7859      	ldrb	r1, [r3, #1]
     e70:	0209      	lsls	r1, r1, #8
     e72:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     e74:	3302      	adds	r3, #2
     e76:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     e78:	05d3      	lsls	r3, r2, #23
     e7a:	0ddb      	lsrs	r3, r3, #23
     e7c:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     e7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     e80:	0c1b      	lsrs	r3, r3, #16
     e82:	3b01      	subs	r3, #1
     e84:	b29b      	uxth	r3, r3
     e86:	85eb      	strh	r3, [r5, #46]	; 0x2e
     e88:	2b00      	cmp	r3, #0
     e8a:	d106      	bne.n	e9a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e8c:	2301      	movs	r3, #1
     e8e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     e90:	2302      	movs	r3, #2
     e92:	75a3      	strb	r3, [r4, #22]
     e94:	e001      	b.n	e9a <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e96:	2301      	movs	r3, #1
     e98:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     e9a:	07b2      	lsls	r2, r6, #30
     e9c:	d509      	bpl.n	eb2 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     e9e:	2302      	movs	r3, #2
     ea0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     ea2:	2200      	movs	r2, #0
     ea4:	2333      	movs	r3, #51	; 0x33
     ea6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     ea8:	07fb      	lsls	r3, r7, #31
     eaa:	d502      	bpl.n	eb2 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     eac:	1c28      	adds	r0, r5, #0
     eae:	68e9      	ldr	r1, [r5, #12]
     eb0:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     eb2:	0772      	lsls	r2, r6, #29
     eb4:	d571      	bpl.n	f9a <_usart_interrupt_handler+0x16a>

		if (module->remaining_rx_buffer_length) {
     eb6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     eb8:	b29b      	uxth	r3, r3
     eba:	2b00      	cmp	r3, #0
     ebc:	d06b      	beq.n	f96 <_usart_interrupt_handler+0x166>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ebe:	69a3      	ldr	r3, [r4, #24]
     ec0:	0c1b      	lsrs	r3, r3, #16
     ec2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     ec4:	0719      	lsls	r1, r3, #28
     ec6:	d402      	bmi.n	ece <_usart_interrupt_handler+0x9e>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ec8:	223f      	movs	r2, #63	; 0x3f
     eca:	4013      	ands	r3, r2
     ecc:	e001      	b.n	ed2 <_usart_interrupt_handler+0xa2>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     ece:	2237      	movs	r2, #55	; 0x37
     ed0:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     ed2:	2b00      	cmp	r3, #0
     ed4:	d03c      	beq.n	f50 <_usart_interrupt_handler+0x120>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     ed6:	079a      	lsls	r2, r3, #30
     ed8:	d508      	bpl.n	eec <_usart_interrupt_handler+0xbc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     eda:	221a      	movs	r2, #26
     edc:	2332      	movs	r3, #50	; 0x32
     ede:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     ee0:	69a2      	ldr	r2, [r4, #24]
     ee2:	0c12      	lsrs	r2, r2, #16
     ee4:	2302      	movs	r3, #2
     ee6:	4313      	orrs	r3, r2
     ee8:	8363      	strh	r3, [r4, #26]
     eea:	e02b      	b.n	f44 <_usart_interrupt_handler+0x114>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     eec:	0759      	lsls	r1, r3, #29
     eee:	d508      	bpl.n	f02 <_usart_interrupt_handler+0xd2>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     ef0:	221e      	movs	r2, #30
     ef2:	2332      	movs	r3, #50	; 0x32
     ef4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     ef6:	69a2      	ldr	r2, [r4, #24]
     ef8:	0c12      	lsrs	r2, r2, #16
     efa:	2304      	movs	r3, #4
     efc:	4313      	orrs	r3, r2
     efe:	8363      	strh	r3, [r4, #26]
     f00:	e020      	b.n	f44 <_usart_interrupt_handler+0x114>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f02:	07da      	lsls	r2, r3, #31
     f04:	d508      	bpl.n	f18 <_usart_interrupt_handler+0xe8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     f06:	2213      	movs	r2, #19
     f08:	2332      	movs	r3, #50	; 0x32
     f0a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     f0c:	69a2      	ldr	r2, [r4, #24]
     f0e:	0c12      	lsrs	r2, r2, #16
     f10:	2301      	movs	r3, #1
     f12:	4313      	orrs	r3, r2
     f14:	8363      	strh	r3, [r4, #26]
     f16:	e015      	b.n	f44 <_usart_interrupt_handler+0x114>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     f18:	06d9      	lsls	r1, r3, #27
     f1a:	d508      	bpl.n	f2e <_usart_interrupt_handler+0xfe>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     f1c:	2242      	movs	r2, #66	; 0x42
     f1e:	2332      	movs	r3, #50	; 0x32
     f20:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     f22:	69a2      	ldr	r2, [r4, #24]
     f24:	0c12      	lsrs	r2, r2, #16
     f26:	2310      	movs	r3, #16
     f28:	4313      	orrs	r3, r2
     f2a:	8363      	strh	r3, [r4, #26]
     f2c:	e00a      	b.n	f44 <_usart_interrupt_handler+0x114>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     f2e:	2220      	movs	r2, #32
     f30:	421a      	tst	r2, r3
     f32:	d007      	beq.n	f44 <_usart_interrupt_handler+0x114>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     f34:	2241      	movs	r2, #65	; 0x41
     f36:	2332      	movs	r3, #50	; 0x32
     f38:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     f3a:	69a2      	ldr	r2, [r4, #24]
     f3c:	0c12      	lsrs	r2, r2, #16
     f3e:	2320      	movs	r3, #32
     f40:	4313      	orrs	r3, r2
     f42:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     f44:	077a      	lsls	r2, r7, #29
     f46:	d528      	bpl.n	f9a <_usart_interrupt_handler+0x16a>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     f48:	1c28      	adds	r0, r5, #0
     f4a:	696b      	ldr	r3, [r5, #20]
     f4c:	4798      	blx	r3
     f4e:	e024      	b.n	f9a <_usart_interrupt_handler+0x16a>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     f50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     f52:	05d2      	lsls	r2, r2, #23
     f54:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     f56:	b2d3      	uxtb	r3, r2
     f58:	6a69      	ldr	r1, [r5, #36]	; 0x24
     f5a:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     f5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f5e:	1c59      	adds	r1, r3, #1
     f60:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f62:	7969      	ldrb	r1, [r5, #5]
     f64:	2901      	cmp	r1, #1
     f66:	d104      	bne.n	f72 <_usart_interrupt_handler+0x142>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     f68:	0a12      	lsrs	r2, r2, #8
     f6a:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     f6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f6e:	3301      	adds	r3, #1
     f70:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     f72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     f74:	b29b      	uxth	r3, r3
     f76:	3b01      	subs	r3, #1
     f78:	b29b      	uxth	r3, r3
     f7a:	85ab      	strh	r3, [r5, #44]	; 0x2c
     f7c:	2b00      	cmp	r3, #0
     f7e:	d10c      	bne.n	f9a <_usart_interrupt_handler+0x16a>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f80:	2304      	movs	r3, #4
     f82:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     f84:	2200      	movs	r2, #0
     f86:	2332      	movs	r3, #50	; 0x32
     f88:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     f8a:	07ba      	lsls	r2, r7, #30
     f8c:	d505      	bpl.n	f9a <_usart_interrupt_handler+0x16a>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     f8e:	1c28      	adds	r0, r5, #0
     f90:	692b      	ldr	r3, [r5, #16]
     f92:	4798      	blx	r3
     f94:	e001      	b.n	f9a <_usart_interrupt_handler+0x16a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f96:	2304      	movs	r3, #4
     f98:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     f9a:	06f1      	lsls	r1, r6, #27
     f9c:	d507      	bpl.n	fae <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     f9e:	2310      	movs	r3, #16
     fa0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     fa2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     fa4:	06fa      	lsls	r2, r7, #27
     fa6:	d502      	bpl.n	fae <_usart_interrupt_handler+0x17e>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     fa8:	1c28      	adds	r0, r5, #0
     faa:	69eb      	ldr	r3, [r5, #28]
     fac:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     fae:	06b1      	lsls	r1, r6, #26
     fb0:	d507      	bpl.n	fc2 <_usart_interrupt_handler+0x192>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     fb2:	2320      	movs	r3, #32
     fb4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     fb6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     fb8:	073a      	lsls	r2, r7, #28
     fba:	d502      	bpl.n	fc2 <_usart_interrupt_handler+0x192>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     fbc:	1c28      	adds	r0, r5, #0
     fbe:	69ab      	ldr	r3, [r5, #24]
     fc0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     fc2:	0731      	lsls	r1, r6, #28
     fc4:	d507      	bpl.n	fd6 <_usart_interrupt_handler+0x1a6>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     fc6:	2308      	movs	r3, #8
     fc8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     fca:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     fcc:	06ba      	lsls	r2, r7, #26
     fce:	d502      	bpl.n	fd6 <_usart_interrupt_handler+0x1a6>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     fd0:	6a2b      	ldr	r3, [r5, #32]
     fd2:	1c28      	adds	r0, r5, #0
     fd4:	4798      	blx	r3
		}
	}
#endif
}
     fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fd8:	2000049c 	.word	0x2000049c

00000fdc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     fdc:	b508      	push	{r3, lr}
	switch (clock_source) {
     fde:	2808      	cmp	r0, #8
     fe0:	d833      	bhi.n	104a <system_clock_source_get_hz+0x6e>
     fe2:	0080      	lsls	r0, r0, #2
     fe4:	4b1b      	ldr	r3, [pc, #108]	; (1054 <system_clock_source_get_hz+0x78>)
     fe6:	581b      	ldr	r3, [r3, r0]
     fe8:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     fea:	2080      	movs	r0, #128	; 0x80
     fec:	0200      	lsls	r0, r0, #8
     fee:	e02f      	b.n	1050 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     ff0:	4b19      	ldr	r3, [pc, #100]	; (1058 <system_clock_source_get_hz+0x7c>)
     ff2:	6918      	ldr	r0, [r3, #16]
     ff4:	e02c      	b.n	1050 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     ff6:	4b19      	ldr	r3, [pc, #100]	; (105c <system_clock_source_get_hz+0x80>)
     ff8:	6a18      	ldr	r0, [r3, #32]
     ffa:	0580      	lsls	r0, r0, #22
     ffc:	0f80      	lsrs	r0, r0, #30
     ffe:	4b18      	ldr	r3, [pc, #96]	; (1060 <system_clock_source_get_hz+0x84>)
    1000:	40c3      	lsrs	r3, r0
    1002:	1c18      	adds	r0, r3, #0
    1004:	e024      	b.n	1050 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1006:	4b14      	ldr	r3, [pc, #80]	; (1058 <system_clock_source_get_hz+0x7c>)
    1008:	6958      	ldr	r0, [r3, #20]
    100a:	e021      	b.n	1050 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    100c:	4b12      	ldr	r3, [pc, #72]	; (1058 <system_clock_source_get_hz+0x7c>)
    100e:	681b      	ldr	r3, [r3, #0]
    1010:	2002      	movs	r0, #2
    1012:	4018      	ands	r0, r3
    1014:	d01c      	beq.n	1050 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1016:	4911      	ldr	r1, [pc, #68]	; (105c <system_clock_source_get_hz+0x80>)
    1018:	2210      	movs	r2, #16
    101a:	68cb      	ldr	r3, [r1, #12]
    101c:	421a      	tst	r2, r3
    101e:	d0fc      	beq.n	101a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1020:	4b0d      	ldr	r3, [pc, #52]	; (1058 <system_clock_source_get_hz+0x7c>)
    1022:	681b      	ldr	r3, [r3, #0]
    1024:	075a      	lsls	r2, r3, #29
    1026:	d512      	bpl.n	104e <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1028:	2000      	movs	r0, #0
    102a:	4b0e      	ldr	r3, [pc, #56]	; (1064 <system_clock_source_get_hz+0x88>)
    102c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    102e:	4b0a      	ldr	r3, [pc, #40]	; (1058 <system_clock_source_get_hz+0x7c>)
    1030:	689b      	ldr	r3, [r3, #8]
    1032:	041b      	lsls	r3, r3, #16
    1034:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1036:	4358      	muls	r0, r3
    1038:	e00a      	b.n	1050 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    103a:	4b08      	ldr	r3, [pc, #32]	; (105c <system_clock_source_get_hz+0x80>)
    103c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
			return 0;
    103e:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1040:	075a      	lsls	r2, r3, #29
    1042:	d505      	bpl.n	1050 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1044:	4b04      	ldr	r3, [pc, #16]	; (1058 <system_clock_source_get_hz+0x7c>)
    1046:	68d8      	ldr	r0, [r3, #12]
    1048:	e002      	b.n	1050 <system_clock_source_get_hz+0x74>
#endif

	default:
		return 0;
    104a:	2000      	movs	r0, #0
    104c:	e000      	b.n	1050 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    104e:	4806      	ldr	r0, [pc, #24]	; (1068 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1050:	bd08      	pop	{r3, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	000021f8 	.word	0x000021f8
    1058:	20000484 	.word	0x20000484
    105c:	40000800 	.word	0x40000800
    1060:	007a1200 	.word	0x007a1200
    1064:	0000140d 	.word	0x0000140d
    1068:	02dc6c00 	.word	0x02dc6c00

0000106c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    106c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    106e:	4b0c      	ldr	r3, [pc, #48]	; (10a0 <system_clock_source_osc8m_set_config+0x34>)
    1070:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1072:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1074:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1076:	7840      	ldrb	r0, [r0, #1]
    1078:	2201      	movs	r2, #1
    107a:	4010      	ands	r0, r2
    107c:	0180      	lsls	r0, r0, #6
    107e:	2640      	movs	r6, #64	; 0x40
    1080:	43b4      	bics	r4, r6
    1082:	4304      	orrs	r4, r0
    1084:	402a      	ands	r2, r5
    1086:	01d0      	lsls	r0, r2, #7
    1088:	2280      	movs	r2, #128	; 0x80
    108a:	4394      	bics	r4, r2
    108c:	1c22      	adds	r2, r4, #0
    108e:	4302      	orrs	r2, r0
    1090:	2003      	movs	r0, #3
    1092:	4001      	ands	r1, r0
    1094:	0209      	lsls	r1, r1, #8
    1096:	4803      	ldr	r0, [pc, #12]	; (10a4 <system_clock_source_osc8m_set_config+0x38>)
    1098:	4002      	ands	r2, r0
    109a:	430a      	orrs	r2, r1
    109c:	621a      	str	r2, [r3, #32]
}
    109e:	bd70      	pop	{r4, r5, r6, pc}
    10a0:	40000800 	.word	0x40000800
    10a4:	fffffcff 	.word	0xfffffcff

000010a8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    10a8:	2808      	cmp	r0, #8
    10aa:	d846      	bhi.n	113a <system_clock_source_enable+0x92>
    10ac:	0080      	lsls	r0, r0, #2
    10ae:	4b24      	ldr	r3, [pc, #144]	; (1140 <system_clock_source_enable+0x98>)
    10b0:	581b      	ldr	r3, [r3, r0]
    10b2:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    10b4:	2000      	movs	r0, #0
    10b6:	e041      	b.n	113c <system_clock_source_enable+0x94>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    10b8:	4b22      	ldr	r3, [pc, #136]	; (1144 <system_clock_source_enable+0x9c>)
    10ba:	6a19      	ldr	r1, [r3, #32]
    10bc:	2202      	movs	r2, #2
    10be:	430a      	orrs	r2, r1
    10c0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    10c2:	2000      	movs	r0, #0
    10c4:	e03a      	b.n	113c <system_clock_source_enable+0x94>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    10c6:	4b1f      	ldr	r3, [pc, #124]	; (1144 <system_clock_source_enable+0x9c>)
    10c8:	6999      	ldr	r1, [r3, #24]
    10ca:	2202      	movs	r2, #2
    10cc:	430a      	orrs	r2, r1
    10ce:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    10d0:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    10d2:	e033      	b.n	113c <system_clock_source_enable+0x94>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    10d4:	4b1b      	ldr	r3, [pc, #108]	; (1144 <system_clock_source_enable+0x9c>)
    10d6:	691a      	ldr	r2, [r3, #16]
    10d8:	b292      	uxth	r2, r2
    10da:	2102      	movs	r1, #2
    10dc:	430a      	orrs	r2, r1
    10de:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    10e0:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    10e2:	e02b      	b.n	113c <system_clock_source_enable+0x94>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    10e4:	4b17      	ldr	r3, [pc, #92]	; (1144 <system_clock_source_enable+0x9c>)
    10e6:	695a      	ldr	r2, [r3, #20]
    10e8:	b292      	uxth	r2, r2
    10ea:	2102      	movs	r1, #2
    10ec:	430a      	orrs	r2, r1
    10ee:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    10f0:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    10f2:	e023      	b.n	113c <system_clock_source_enable+0x94>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    10f4:	4b14      	ldr	r3, [pc, #80]	; (1148 <system_clock_source_enable+0xa0>)
    10f6:	6819      	ldr	r1, [r3, #0]
    10f8:	2202      	movs	r2, #2
    10fa:	430a      	orrs	r2, r1
    10fc:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    10fe:	681a      	ldr	r2, [r3, #0]
    1100:	4b12      	ldr	r3, [pc, #72]	; (114c <system_clock_source_enable+0xa4>)
    1102:	401a      	ands	r2, r3
    1104:	4b0f      	ldr	r3, [pc, #60]	; (1144 <system_clock_source_enable+0x9c>)
    1106:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1108:	1c19      	adds	r1, r3, #0
    110a:	2210      	movs	r2, #16
    110c:	68cb      	ldr	r3, [r1, #12]
    110e:	421a      	tst	r2, r3
    1110:	d0fc      	beq.n	110c <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1112:	4a0d      	ldr	r2, [pc, #52]	; (1148 <system_clock_source_enable+0xa0>)
    1114:	6891      	ldr	r1, [r2, #8]
    1116:	4b0b      	ldr	r3, [pc, #44]	; (1144 <system_clock_source_enable+0x9c>)
    1118:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    111a:	6851      	ldr	r1, [r2, #4]
    111c:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    111e:	6812      	ldr	r2, [r2, #0]
    1120:	b292      	uxth	r2, r2
    1122:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1124:	2000      	movs	r0, #0
    1126:	e009      	b.n	113c <system_clock_source_enable+0x94>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1128:	4b06      	ldr	r3, [pc, #24]	; (1144 <system_clock_source_enable+0x9c>)
    112a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    112c:	b2c9      	uxtb	r1, r1
    112e:	2202      	movs	r2, #2
    1130:	4311      	orrs	r1, r2
    1132:	2244      	movs	r2, #68	; 0x44
    1134:	5499      	strb	r1, [r3, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1136:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1138:	e000      	b.n	113c <system_clock_source_enable+0x94>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    113a:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    113c:	4770      	bx	lr
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	0000221c 	.word	0x0000221c
    1144:	40000800 	.word	0x40000800
    1148:	20000484 	.word	0x20000484
    114c:	0000ff7f 	.word	0x0000ff7f

00001150 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    1150:	b530      	push	{r4, r5, lr}
    1152:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1154:	22c2      	movs	r2, #194	; 0xc2
    1156:	00d2      	lsls	r2, r2, #3
    1158:	4b13      	ldr	r3, [pc, #76]	; (11a8 <system_clock_init+0x58>)
    115a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    115c:	4b13      	ldr	r3, [pc, #76]	; (11ac <system_clock_init+0x5c>)
    115e:	685a      	ldr	r2, [r3, #4]
    1160:	211e      	movs	r1, #30
    1162:	438a      	bics	r2, r1
    1164:	605a      	str	r2, [r3, #4]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1166:	a803      	add	r0, sp, #12
    1168:	2400      	movs	r4, #0
    116a:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    116c:	2501      	movs	r5, #1
    116e:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1170:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1172:	4b0f      	ldr	r3, [pc, #60]	; (11b0 <system_clock_init+0x60>)
    1174:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1176:	2006      	movs	r0, #6
    1178:	4b0e      	ldr	r3, [pc, #56]	; (11b4 <system_clock_init+0x64>)
    117a:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    117c:	4b0e      	ldr	r3, [pc, #56]	; (11b8 <system_clock_init+0x68>)
    117e:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1180:	4b0e      	ldr	r3, [pc, #56]	; (11bc <system_clock_init+0x6c>)
    1182:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1184:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1186:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1188:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    118a:	466a      	mov	r2, sp
    118c:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    118e:	2306      	movs	r3, #6
    1190:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1192:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1194:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1196:	2000      	movs	r0, #0
    1198:	4669      	mov	r1, sp
    119a:	4b09      	ldr	r3, [pc, #36]	; (11c0 <system_clock_init+0x70>)
    119c:	4798      	blx	r3
    119e:	2000      	movs	r0, #0
    11a0:	4b08      	ldr	r3, [pc, #32]	; (11c4 <system_clock_init+0x74>)
    11a2:	4798      	blx	r3
#endif
}
    11a4:	b005      	add	sp, #20
    11a6:	bd30      	pop	{r4, r5, pc}
    11a8:	40000800 	.word	0x40000800
    11ac:	41004000 	.word	0x41004000
    11b0:	0000106d 	.word	0x0000106d
    11b4:	000010a9 	.word	0x000010a9
    11b8:	000011c9 	.word	0x000011c9
    11bc:	40000400 	.word	0x40000400
    11c0:	000011ed 	.word	0x000011ed
    11c4:	0000129d 	.word	0x0000129d

000011c8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    11c8:	4b06      	ldr	r3, [pc, #24]	; (11e4 <system_gclk_init+0x1c>)
    11ca:	6999      	ldr	r1, [r3, #24]
    11cc:	2208      	movs	r2, #8
    11ce:	430a      	orrs	r2, r1
    11d0:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    11d2:	2201      	movs	r2, #1
    11d4:	4b04      	ldr	r3, [pc, #16]	; (11e8 <system_gclk_init+0x20>)
    11d6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    11d8:	1c19      	adds	r1, r3, #0
    11da:	680b      	ldr	r3, [r1, #0]
    11dc:	4213      	tst	r3, r2
    11de:	d1fc      	bne.n	11da <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    11e0:	4770      	bx	lr
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	40000400 	.word	0x40000400
    11e8:	40000c00 	.word	0x40000c00

000011ec <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    11ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ee:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    11f0:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    11f2:	780d      	ldrb	r5, [r1, #0]
    11f4:	022d      	lsls	r5, r5, #8
    11f6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    11f8:	784b      	ldrb	r3, [r1, #1]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d002      	beq.n	1204 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    11fe:	2380      	movs	r3, #128	; 0x80
    1200:	02db      	lsls	r3, r3, #11
    1202:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1204:	7a4b      	ldrb	r3, [r1, #9]
    1206:	2b00      	cmp	r3, #0
    1208:	d002      	beq.n	1210 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    120a:	2380      	movs	r3, #128	; 0x80
    120c:	031b      	lsls	r3, r3, #12
    120e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1210:	684c      	ldr	r4, [r1, #4]
    1212:	2c01      	cmp	r4, #1
    1214:	d917      	bls.n	1246 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1216:	1e63      	subs	r3, r4, #1
    1218:	421c      	tst	r4, r3
    121a:	d10f      	bne.n	123c <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    121c:	2c02      	cmp	r4, #2
    121e:	d906      	bls.n	122e <system_gclk_gen_set_config+0x42>
    1220:	2302      	movs	r3, #2
    1222:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1224:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1226:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1228:	429c      	cmp	r4, r3
    122a:	d8fb      	bhi.n	1224 <system_gclk_gen_set_config+0x38>
    122c:	e000      	b.n	1230 <system_gclk_gen_set_config+0x44>
    122e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1230:	0217      	lsls	r7, r2, #8
    1232:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1234:	2380      	movs	r3, #128	; 0x80
    1236:	035b      	lsls	r3, r3, #13
    1238:	431d      	orrs	r5, r3
    123a:	e004      	b.n	1246 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    123c:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    123e:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1240:	2380      	movs	r3, #128	; 0x80
    1242:	029b      	lsls	r3, r3, #10
    1244:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1246:	7a0b      	ldrb	r3, [r1, #8]
    1248:	2b00      	cmp	r3, #0
    124a:	d002      	beq.n	1252 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    124c:	2380      	movs	r3, #128	; 0x80
    124e:	039b      	lsls	r3, r3, #14
    1250:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    1252:	4a0e      	ldr	r2, [pc, #56]	; (128c <system_gclk_gen_set_config+0xa0>)
    1254:	6813      	ldr	r3, [r2, #0]
	}

	while (system_gclk_is_syncing()) {
    1256:	0419      	lsls	r1, r3, #16
    1258:	d4fc      	bmi.n	1254 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    125a:	4b0d      	ldr	r3, [pc, #52]	; (1290 <system_gclk_gen_set_config+0xa4>)
    125c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    125e:	4b0d      	ldr	r3, [pc, #52]	; (1294 <system_gclk_gen_set_config+0xa8>)
    1260:	701e      	strb	r6, [r3, #0]
    1262:	490a      	ldr	r1, [pc, #40]	; (128c <system_gclk_gen_set_config+0xa0>)
    1264:	680b      	ldr	r3, [r1, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1266:	041a      	lsls	r2, r3, #16
    1268:	d4fc      	bmi.n	1264 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    126a:	4b08      	ldr	r3, [pc, #32]	; (128c <system_gclk_gen_set_config+0xa0>)
    126c:	609f      	str	r7, [r3, #8]
    126e:	1c1a      	adds	r2, r3, #0
    1270:	6813      	ldr	r3, [r2, #0]

	while (system_gclk_is_syncing()) {
    1272:	0419      	lsls	r1, r3, #16
    1274:	d4fc      	bmi.n	1270 <system_gclk_gen_set_config+0x84>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1276:	4b05      	ldr	r3, [pc, #20]	; (128c <system_gclk_gen_set_config+0xa0>)
    1278:	6859      	ldr	r1, [r3, #4]
    127a:	2280      	movs	r2, #128	; 0x80
    127c:	0252      	lsls	r2, r2, #9
    127e:	400a      	ands	r2, r1
    1280:	4315      	orrs	r5, r2
    1282:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1284:	4b04      	ldr	r3, [pc, #16]	; (1298 <system_gclk_gen_set_config+0xac>)
    1286:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	40000c00 	.word	0x40000c00
    1290:	0000027d 	.word	0x0000027d
    1294:	40000c08 	.word	0x40000c08
    1298:	000002bd 	.word	0x000002bd

0000129c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    129c:	b510      	push	{r4, lr}
    129e:	1c04      	adds	r4, r0, #0
    12a0:	4a0a      	ldr	r2, [pc, #40]	; (12cc <system_gclk_gen_enable+0x30>)
    12a2:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    12a4:	0419      	lsls	r1, r3, #16
    12a6:	d4fc      	bmi.n	12a2 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    12a8:	4b09      	ldr	r3, [pc, #36]	; (12d0 <system_gclk_gen_enable+0x34>)
    12aa:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12ac:	4b09      	ldr	r3, [pc, #36]	; (12d4 <system_gclk_gen_enable+0x38>)
    12ae:	701c      	strb	r4, [r3, #0]
    12b0:	4a06      	ldr	r2, [pc, #24]	; (12cc <system_gclk_gen_enable+0x30>)
    12b2:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    12b4:	0419      	lsls	r1, r3, #16
    12b6:	d4fc      	bmi.n	12b2 <system_gclk_gen_enable+0x16>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    12b8:	4b04      	ldr	r3, [pc, #16]	; (12cc <system_gclk_gen_enable+0x30>)
    12ba:	6859      	ldr	r1, [r3, #4]
    12bc:	2280      	movs	r2, #128	; 0x80
    12be:	0252      	lsls	r2, r2, #9
    12c0:	430a      	orrs	r2, r1
    12c2:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    12c4:	4b04      	ldr	r3, [pc, #16]	; (12d8 <system_gclk_gen_enable+0x3c>)
    12c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12c8:	bd10      	pop	{r4, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	40000c00 	.word	0x40000c00
    12d0:	0000027d 	.word	0x0000027d
    12d4:	40000c04 	.word	0x40000c04
    12d8:	000002bd 	.word	0x000002bd

000012dc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    12dc:	b570      	push	{r4, r5, r6, lr}
    12de:	1c04      	adds	r4, r0, #0
    12e0:	4a18      	ldr	r2, [pc, #96]	; (1344 <system_gclk_gen_get_hz+0x68>)
    12e2:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    12e4:	0419      	lsls	r1, r3, #16
    12e6:	d4fc      	bmi.n	12e2 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    12e8:	4b17      	ldr	r3, [pc, #92]	; (1348 <system_gclk_gen_get_hz+0x6c>)
    12ea:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12ec:	4b17      	ldr	r3, [pc, #92]	; (134c <system_gclk_gen_get_hz+0x70>)
    12ee:	701c      	strb	r4, [r3, #0]
    12f0:	4a14      	ldr	r2, [pc, #80]	; (1344 <system_gclk_gen_get_hz+0x68>)
    12f2:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    12f4:	0419      	lsls	r1, r3, #16
    12f6:	d4fc      	bmi.n	12f2 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    12f8:	4e12      	ldr	r6, [pc, #72]	; (1344 <system_gclk_gen_get_hz+0x68>)
    12fa:	6870      	ldr	r0, [r6, #4]
    12fc:	04c0      	lsls	r0, r0, #19
    12fe:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1300:	4b13      	ldr	r3, [pc, #76]	; (1350 <system_gclk_gen_get_hz+0x74>)
    1302:	4798      	blx	r3
    1304:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1306:	4b11      	ldr	r3, [pc, #68]	; (134c <system_gclk_gen_get_hz+0x70>)
    1308:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    130a:	6876      	ldr	r6, [r6, #4]
    130c:	02f6      	lsls	r6, r6, #11
    130e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1310:	4b10      	ldr	r3, [pc, #64]	; (1354 <system_gclk_gen_get_hz+0x78>)
    1312:	701c      	strb	r4, [r3, #0]
    1314:	4a0b      	ldr	r2, [pc, #44]	; (1344 <system_gclk_gen_get_hz+0x68>)
    1316:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1318:	0419      	lsls	r1, r3, #16
    131a:	d4fc      	bmi.n	1316 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    131c:	4b09      	ldr	r3, [pc, #36]	; (1344 <system_gclk_gen_get_hz+0x68>)
    131e:	689c      	ldr	r4, [r3, #8]
    1320:	0224      	lsls	r4, r4, #8
    1322:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1324:	4b0c      	ldr	r3, [pc, #48]	; (1358 <system_gclk_gen_get_hz+0x7c>)
    1326:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1328:	2e00      	cmp	r6, #0
    132a:	d107      	bne.n	133c <system_gclk_gen_get_hz+0x60>
    132c:	2c01      	cmp	r4, #1
    132e:	d907      	bls.n	1340 <system_gclk_gen_get_hz+0x64>
		gen_input_hz /= divider;
    1330:	1c28      	adds	r0, r5, #0
    1332:	1c21      	adds	r1, r4, #0
    1334:	4b09      	ldr	r3, [pc, #36]	; (135c <system_gclk_gen_get_hz+0x80>)
    1336:	4798      	blx	r3
    1338:	1c05      	adds	r5, r0, #0
    133a:	e001      	b.n	1340 <system_gclk_gen_get_hz+0x64>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    133c:	3401      	adds	r4, #1
    133e:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1340:	1c28      	adds	r0, r5, #0
    1342:	bd70      	pop	{r4, r5, r6, pc}
    1344:	40000c00 	.word	0x40000c00
    1348:	0000027d 	.word	0x0000027d
    134c:	40000c04 	.word	0x40000c04
    1350:	00000fdd 	.word	0x00000fdd
    1354:	40000c08 	.word	0x40000c08
    1358:	000002bd 	.word	0x000002bd
    135c:	00001769 	.word	0x00001769

00001360 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1360:	b510      	push	{r4, lr}
    1362:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1364:	4b06      	ldr	r3, [pc, #24]	; (1380 <system_gclk_chan_enable+0x20>)
    1366:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1368:	4b06      	ldr	r3, [pc, #24]	; (1384 <system_gclk_chan_enable+0x24>)
    136a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    136c:	4b06      	ldr	r3, [pc, #24]	; (1388 <system_gclk_chan_enable+0x28>)
    136e:	6819      	ldr	r1, [r3, #0]
    1370:	0c09      	lsrs	r1, r1, #16
    1372:	2280      	movs	r2, #128	; 0x80
    1374:	01d2      	lsls	r2, r2, #7
    1376:	430a      	orrs	r2, r1
    1378:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    137a:	4b04      	ldr	r3, [pc, #16]	; (138c <system_gclk_chan_enable+0x2c>)
    137c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    137e:	bd10      	pop	{r4, pc}
    1380:	0000027d 	.word	0x0000027d
    1384:	40000c02 	.word	0x40000c02
    1388:	40000c00 	.word	0x40000c00
    138c:	000002bd 	.word	0x000002bd

00001390 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1390:	b510      	push	{r4, lr}
    1392:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1394:	4b10      	ldr	r3, [pc, #64]	; (13d8 <system_gclk_chan_disable+0x48>)
    1396:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1398:	4b10      	ldr	r3, [pc, #64]	; (13dc <system_gclk_chan_disable+0x4c>)
    139a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    139c:	4b10      	ldr	r3, [pc, #64]	; (13e0 <system_gclk_chan_disable+0x50>)
    139e:	6818      	ldr	r0, [r3, #0]
    13a0:	0100      	lsls	r0, r0, #4
    13a2:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    13a4:	8859      	ldrh	r1, [r3, #2]
    13a6:	4a0f      	ldr	r2, [pc, #60]	; (13e4 <system_gclk_chan_disable+0x54>)
    13a8:	400a      	ands	r2, r1
    13aa:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    13ac:	681a      	ldr	r2, [r3, #0]
    13ae:	0c12      	lsrs	r2, r2, #16
    13b0:	490d      	ldr	r1, [pc, #52]	; (13e8 <system_gclk_chan_disable+0x58>)
    13b2:	400a      	ands	r2, r1
    13b4:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    13b6:	1c19      	adds	r1, r3, #0
    13b8:	2280      	movs	r2, #128	; 0x80
    13ba:	01d2      	lsls	r2, r2, #7
    13bc:	680b      	ldr	r3, [r1, #0]
    13be:	0c1b      	lsrs	r3, r3, #16
    13c0:	4213      	tst	r3, r2
    13c2:	d1fb      	bne.n	13bc <system_gclk_chan_disable+0x2c>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    13c4:	4b06      	ldr	r3, [pc, #24]	; (13e0 <system_gclk_chan_disable+0x50>)
    13c6:	0201      	lsls	r1, r0, #8
    13c8:	8858      	ldrh	r0, [r3, #2]
    13ca:	4a06      	ldr	r2, [pc, #24]	; (13e4 <system_gclk_chan_disable+0x54>)
    13cc:	4002      	ands	r2, r0
    13ce:	430a      	orrs	r2, r1
    13d0:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13d2:	4b06      	ldr	r3, [pc, #24]	; (13ec <system_gclk_chan_disable+0x5c>)
    13d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13d6:	bd10      	pop	{r4, pc}
    13d8:	0000027d 	.word	0x0000027d
    13dc:	40000c02 	.word	0x40000c02
    13e0:	40000c00 	.word	0x40000c00
    13e4:	fffff0ff 	.word	0xfffff0ff
    13e8:	ffffbfff 	.word	0xffffbfff
    13ec:	000002bd 	.word	0x000002bd

000013f0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    13f0:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    13f2:	780c      	ldrb	r4, [r1, #0]
    13f4:	0224      	lsls	r4, r4, #8
    13f6:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    13f8:	4b02      	ldr	r3, [pc, #8]	; (1404 <system_gclk_chan_set_config+0x14>)
    13fa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    13fc:	b2a4      	uxth	r4, r4
    13fe:	4b02      	ldr	r3, [pc, #8]	; (1408 <system_gclk_chan_set_config+0x18>)
    1400:	805c      	strh	r4, [r3, #2]
}
    1402:	bd10      	pop	{r4, pc}
    1404:	00001391 	.word	0x00001391
    1408:	40000c00 	.word	0x40000c00

0000140c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    140c:	b510      	push	{r4, lr}
    140e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1410:	4b06      	ldr	r3, [pc, #24]	; (142c <system_gclk_chan_get_hz+0x20>)
    1412:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1414:	4b06      	ldr	r3, [pc, #24]	; (1430 <system_gclk_chan_get_hz+0x24>)
    1416:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1418:	4b06      	ldr	r3, [pc, #24]	; (1434 <system_gclk_chan_get_hz+0x28>)
    141a:	681c      	ldr	r4, [r3, #0]
    141c:	0124      	lsls	r4, r4, #4
    141e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1420:	4b05      	ldr	r3, [pc, #20]	; (1438 <system_gclk_chan_get_hz+0x2c>)
    1422:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1424:	1c20      	adds	r0, r4, #0
    1426:	4b05      	ldr	r3, [pc, #20]	; (143c <system_gclk_chan_get_hz+0x30>)
    1428:	4798      	blx	r3
}
    142a:	bd10      	pop	{r4, pc}
    142c:	0000027d 	.word	0x0000027d
    1430:	40000c02 	.word	0x40000c02
    1434:	40000c00 	.word	0x40000c00
    1438:	000002bd 	.word	0x000002bd
    143c:	000012dd 	.word	0x000012dd

00001440 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1440:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1442:	78d4      	ldrb	r4, [r2, #3]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1444:	2300      	movs	r3, #0

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1446:	2c00      	cmp	r4, #0
    1448:	d11e      	bne.n	1488 <_system_pinmux_config+0x48>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    144a:	7813      	ldrb	r3, [r2, #0]
    144c:	2b80      	cmp	r3, #128	; 0x80
    144e:	d004      	beq.n	145a <_system_pinmux_config+0x1a>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1450:	061b      	lsls	r3, r3, #24
    1452:	2480      	movs	r4, #128	; 0x80
    1454:	0264      	lsls	r4, r4, #9
    1456:	4323      	orrs	r3, r4
    1458:	e000      	b.n	145c <_system_pinmux_config+0x1c>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    145a:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    145c:	7854      	ldrb	r4, [r2, #1]
    145e:	2502      	movs	r5, #2
    1460:	43ac      	bics	r4, r5
    1462:	d10a      	bne.n	147a <_system_pinmux_config+0x3a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1464:	7894      	ldrb	r4, [r2, #2]
    1466:	2c00      	cmp	r4, #0
    1468:	d103      	bne.n	1472 <_system_pinmux_config+0x32>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    146a:	2480      	movs	r4, #128	; 0x80
    146c:	02a4      	lsls	r4, r4, #10
    146e:	4323      	orrs	r3, r4
    1470:	e002      	b.n	1478 <_system_pinmux_config+0x38>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1472:	24c0      	movs	r4, #192	; 0xc0
    1474:	02e4      	lsls	r4, r4, #11
    1476:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1478:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    147a:	7854      	ldrb	r4, [r2, #1]
    147c:	3c01      	subs	r4, #1
    147e:	b2e4      	uxtb	r4, r4
    1480:	2c01      	cmp	r4, #1
    1482:	d801      	bhi.n	1488 <_system_pinmux_config+0x48>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1484:	4c10      	ldr	r4, [pc, #64]	; (14c8 <_system_pinmux_config+0x88>)
    1486:	4023      	ands	r3, r4
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1488:	040d      	lsls	r5, r1, #16
    148a:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    148c:	24a0      	movs	r4, #160	; 0xa0
    148e:	05e4      	lsls	r4, r4, #23
    1490:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1492:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1494:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1496:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1498:	24d0      	movs	r4, #208	; 0xd0
    149a:	0624      	lsls	r4, r4, #24
    149c:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    149e:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14a0:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    14a2:	78d4      	ldrb	r4, [r2, #3]
    14a4:	2c00      	cmp	r4, #0
    14a6:	d10d      	bne.n	14c4 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    14a8:	035c      	lsls	r4, r3, #13
    14aa:	d505      	bpl.n	14b8 <_system_pinmux_config+0x78>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    14ac:	7893      	ldrb	r3, [r2, #2]
    14ae:	2b01      	cmp	r3, #1
    14b0:	d101      	bne.n	14b6 <_system_pinmux_config+0x76>
				port->OUTSET.reg = pin_mask;
    14b2:	6181      	str	r1, [r0, #24]
    14b4:	e000      	b.n	14b8 <_system_pinmux_config+0x78>
			} else {
				port->OUTCLR.reg = pin_mask;
    14b6:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    14b8:	7853      	ldrb	r3, [r2, #1]
    14ba:	3b01      	subs	r3, #1
    14bc:	b2db      	uxtb	r3, r3
    14be:	2b01      	cmp	r3, #1
    14c0:	d800      	bhi.n	14c4 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    14c2:	6081      	str	r1, [r0, #8]
		}
	}
}
    14c4:	bd30      	pop	{r4, r5, pc}
    14c6:	46c0      	nop			; (mov r8, r8)
    14c8:	fffbffff 	.word	0xfffbffff

000014cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    14cc:	b508      	push	{r3, lr}
    14ce:	1c03      	adds	r3, r0, #0
    14d0:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14d2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14d4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14d6:	2900      	cmp	r1, #0
    14d8:	d103      	bne.n	14e2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    14da:	0958      	lsrs	r0, r3, #5
    14dc:	01c0      	lsls	r0, r0, #7
    14de:	4904      	ldr	r1, [pc, #16]	; (14f0 <system_pinmux_pin_set_config+0x24>)
    14e0:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    14e2:	211f      	movs	r1, #31
    14e4:	400b      	ands	r3, r1
    14e6:	2101      	movs	r1, #1
    14e8:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    14ea:	4b02      	ldr	r3, [pc, #8]	; (14f4 <system_pinmux_pin_set_config+0x28>)
    14ec:	4798      	blx	r3
}
    14ee:	bd08      	pop	{r3, pc}
    14f0:	41004400 	.word	0x41004400
    14f4:	00001441 	.word	0x00001441

000014f8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    14f8:	4770      	bx	lr
    14fa:	46c0      	nop			; (mov r8, r8)

000014fc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    14fc:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    14fe:	4b04      	ldr	r3, [pc, #16]	; (1510 <system_init+0x14>)
    1500:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1502:	4b04      	ldr	r3, [pc, #16]	; (1514 <system_init+0x18>)
    1504:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1506:	4b04      	ldr	r3, [pc, #16]	; (1518 <system_init+0x1c>)
    1508:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    150a:	4b04      	ldr	r3, [pc, #16]	; (151c <system_init+0x20>)
    150c:	4798      	blx	r3
}
    150e:	bd08      	pop	{r3, pc}
    1510:	00001151 	.word	0x00001151
    1514:	000002ed 	.word	0x000002ed
    1518:	000014f9 	.word	0x000014f9
    151c:	000014f9 	.word	0x000014f9

00001520 <Dummy_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1520:	f3ef 8305 	mrs	r3, IPSR
    1524:	e7fc      	b.n	1520 <Dummy_Handler>
    1526:	46c0      	nop			; (mov r8, r8)

00001528 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1528:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    152a:	4b19      	ldr	r3, [pc, #100]	; (1590 <Reset_Handler+0x68>)
    152c:	4a19      	ldr	r2, [pc, #100]	; (1594 <Reset_Handler+0x6c>)
    152e:	429a      	cmp	r2, r3
    1530:	d003      	beq.n	153a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1532:	4b19      	ldr	r3, [pc, #100]	; (1598 <Reset_Handler+0x70>)
    1534:	4a16      	ldr	r2, [pc, #88]	; (1590 <Reset_Handler+0x68>)
    1536:	429a      	cmp	r2, r3
    1538:	d304      	bcc.n	1544 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    153a:	4b18      	ldr	r3, [pc, #96]	; (159c <Reset_Handler+0x74>)
    153c:	4a18      	ldr	r2, [pc, #96]	; (15a0 <Reset_Handler+0x78>)
    153e:	429a      	cmp	r2, r3
    1540:	d310      	bcc.n	1564 <Reset_Handler+0x3c>
    1542:	e01b      	b.n	157c <Reset_Handler+0x54>
    1544:	4b17      	ldr	r3, [pc, #92]	; (15a4 <Reset_Handler+0x7c>)
    1546:	4814      	ldr	r0, [pc, #80]	; (1598 <Reset_Handler+0x70>)
    1548:	3003      	adds	r0, #3
    154a:	1ac0      	subs	r0, r0, r3
    154c:	0880      	lsrs	r0, r0, #2
    154e:	3001      	adds	r0, #1
    1550:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1552:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1554:	490e      	ldr	r1, [pc, #56]	; (1590 <Reset_Handler+0x68>)
    1556:	4a0f      	ldr	r2, [pc, #60]	; (1594 <Reset_Handler+0x6c>)
    1558:	58d4      	ldr	r4, [r2, r3]
    155a:	50cc      	str	r4, [r1, r3]
    155c:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    155e:	4283      	cmp	r3, r0
    1560:	d1fa      	bne.n	1558 <Reset_Handler+0x30>
    1562:	e7ea      	b.n	153a <Reset_Handler+0x12>
    1564:	4b0e      	ldr	r3, [pc, #56]	; (15a0 <Reset_Handler+0x78>)
    1566:	1d1a      	adds	r2, r3, #4
    1568:	490c      	ldr	r1, [pc, #48]	; (159c <Reset_Handler+0x74>)
    156a:	3103      	adds	r1, #3
    156c:	1a89      	subs	r1, r1, r2
    156e:	0889      	lsrs	r1, r1, #2
    1570:	0089      	lsls	r1, r1, #2
    1572:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1574:	2100      	movs	r1, #0
    1576:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1578:	4293      	cmp	r3, r2
    157a:	d1fc      	bne.n	1576 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    157c:	4b0a      	ldr	r3, [pc, #40]	; (15a8 <Reset_Handler+0x80>)
    157e:	217f      	movs	r1, #127	; 0x7f
    1580:	4a0a      	ldr	r2, [pc, #40]	; (15ac <Reset_Handler+0x84>)
    1582:	438a      	bics	r2, r1
    1584:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1586:	4b0a      	ldr	r3, [pc, #40]	; (15b0 <Reset_Handler+0x88>)
    1588:	4798      	blx	r3

        /* Branch to main function */
        main();
    158a:	4b0a      	ldr	r3, [pc, #40]	; (15b4 <Reset_Handler+0x8c>)
    158c:	4798      	blx	r3
    158e:	e7fe      	b.n	158e <Reset_Handler+0x66>
    1590:	20000000 	.word	0x20000000
    1594:	000022ac 	.word	0x000022ac
    1598:	20000440 	.word	0x20000440
    159c:	200004e8 	.word	0x200004e8
    15a0:	20000440 	.word	0x20000440
    15a4:	20000004 	.word	0x20000004
    15a8:	e000ed00 	.word	0xe000ed00
    15ac:	00000000 	.word	0x00000000
    15b0:	00002065 	.word	0x00002065
    15b4:	00001679 	.word	0x00001679

000015b8 <configure_usart>:
#include <io.h>

struct usart_module usart_instance;

void configure_usart(void)
{
    15b8:	b570      	push	{r4, r5, r6, lr}
    15ba:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    15bc:	2380      	movs	r3, #128	; 0x80
    15be:	05db      	lsls	r3, r3, #23
    15c0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    15c2:	2300      	movs	r3, #0
    15c4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    15c6:	22ff      	movs	r2, #255	; 0xff
    15c8:	4668      	mov	r0, sp
    15ca:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    15cc:	2200      	movs	r2, #0
    15ce:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    15d0:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    15d2:	2196      	movs	r1, #150	; 0x96
    15d4:	0189      	lsls	r1, r1, #6
    15d6:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    15d8:	2101      	movs	r1, #1
    15da:	2024      	movs	r0, #36	; 0x24
    15dc:	466c      	mov	r4, sp
    15de:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    15e0:	2025      	movs	r0, #37	; 0x25
    15e2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    15e4:	2126      	movs	r1, #38	; 0x26
    15e6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    15e8:	2127      	movs	r1, #39	; 0x27
    15ea:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    15ec:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    15ee:	212c      	movs	r1, #44	; 0x2c
    15f0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    15f2:	212d      	movs	r1, #45	; 0x2d
    15f4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    15f6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    15f8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    15fa:	76e3      	strb	r3, [r4, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    15fc:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    15fe:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    1600:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                        = 19;
    1602:	2313      	movs	r3, #19
    1604:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    1606:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	
	config_usart.baudrate    = 9600;
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1608:	2380      	movs	r3, #128	; 0x80
    160a:	035b      	lsls	r3, r3, #13
    160c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    160e:	4b13      	ldr	r3, [pc, #76]	; (165c <configure_usart+0xa4>)
    1610:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1612:	4b13      	ldr	r3, [pc, #76]	; (1660 <configure_usart+0xa8>)
    1614:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1616:	2301      	movs	r3, #1
    1618:	425b      	negs	r3, r3
    161a:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    161c:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    161e:	4e11      	ldr	r6, [pc, #68]	; (1664 <configure_usart+0xac>)
    1620:	4d11      	ldr	r5, [pc, #68]	; (1668 <configure_usart+0xb0>)
    1622:	4c12      	ldr	r4, [pc, #72]	; (166c <configure_usart+0xb4>)
    1624:	1c30      	adds	r0, r6, #0
    1626:	1c29      	adds	r1, r5, #0
    1628:	466a      	mov	r2, sp
    162a:	47a0      	blx	r4
    162c:	2800      	cmp	r0, #0
    162e:	d1f9      	bne.n	1624 <configure_usart+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1630:	4d0c      	ldr	r5, [pc, #48]	; (1664 <configure_usart+0xac>)
    1632:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1634:	1c20      	adds	r0, r4, #0
    1636:	4b0e      	ldr	r3, [pc, #56]	; (1670 <configure_usart+0xb8>)
    1638:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    163a:	231f      	movs	r3, #31
    163c:	4018      	ands	r0, r3
    163e:	2301      	movs	r3, #1
    1640:	4083      	lsls	r3, r0
    1642:	1c18      	adds	r0, r3, #0
    1644:	4b0b      	ldr	r3, [pc, #44]	; (1674 <configure_usart+0xbc>)
    1646:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1648:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    164a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    164c:	2b00      	cmp	r3, #0
    164e:	d1fc      	bne.n	164a <configure_usart+0x92>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1650:	6822      	ldr	r2, [r4, #0]
    1652:	2302      	movs	r3, #2
    1654:	4313      	orrs	r3, r2
    1656:	6023      	str	r3, [r4, #0]
	}
	usart_enable(&usart_instance);
}
    1658:	b010      	add	sp, #64	; 0x40
    165a:	bd70      	pop	{r4, r5, r6, pc}
    165c:	00160002 	.word	0x00160002
    1660:	00170002 	.word	0x00170002
    1664:	200004b4 	.word	0x200004b4
    1668:	42001400 	.word	0x42001400
    166c:	00000a49 	.word	0x00000a49
    1670:	00000685 	.word	0x00000685
    1674:	e000e100 	.word	0xe000e100

00001678 <main>:

int main (void)
{
    1678:	b5f0      	push	{r4, r5, r6, r7, lr}
    167a:	4647      	mov	r7, r8
    167c:	b480      	push	{r7}
    167e:	b08a      	sub	sp, #40	; 0x28
	system_init();
    1680:	4b2b      	ldr	r3, [pc, #172]	; (1730 <main+0xb8>)
    1682:	4798      	blx	r3
	configure_usart();
    1684:	4b2b      	ldr	r3, [pc, #172]	; (1734 <main+0xbc>)
    1686:	4798      	blx	r3
	
	if (at25dfx_chip_check_presence(FLASH_ADDR)==STATUS_OK); {
    1688:	2000      	movs	r0, #0
    168a:	4b2b      	ldr	r3, [pc, #172]	; (1738 <main+0xc0>)
    168c:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    168e:	4c2b      	ldr	r4, [pc, #172]	; (173c <main+0xc4>)
    1690:	2580      	movs	r5, #128	; 0x80
    1692:	05ed      	lsls	r5, r5, #23
    1694:	6165      	str	r5, [r4, #20]
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		delay_ms(5000);
    1696:	2000      	movs	r0, #0
    1698:	4b29      	ldr	r3, [pc, #164]	; (1740 <main+0xc8>)
    169a:	4798      	blx	r3
    169c:	2100      	movs	r1, #0
    169e:	4b1f      	ldr	r3, [pc, #124]	; (171c <main+0xa4>)
    16a0:	4a1d      	ldr	r2, [pc, #116]	; (1718 <main+0xa0>)
    16a2:	4e28      	ldr	r6, [pc, #160]	; (1744 <main+0xcc>)
    16a4:	47b0      	blx	r6
    16a6:	4a1e      	ldr	r2, [pc, #120]	; (1720 <main+0xa8>)
    16a8:	4b1e      	ldr	r3, [pc, #120]	; (1724 <main+0xac>)
    16aa:	1880      	adds	r0, r0, r2
    16ac:	4159      	adcs	r1, r3
    16ae:	4a1e      	ldr	r2, [pc, #120]	; (1728 <main+0xb0>)
    16b0:	4b1e      	ldr	r3, [pc, #120]	; (172c <main+0xb4>)
    16b2:	4e25      	ldr	r6, [pc, #148]	; (1748 <main+0xd0>)
    16b4:	47b0      	blx	r6
    16b6:	4b25      	ldr	r3, [pc, #148]	; (174c <main+0xd4>)
    16b8:	4798      	blx	r3
		uint8_t string[] = "Sweet! We can see Flash Memory!\r\n";
    16ba:	a901      	add	r1, sp, #4
    16bc:	4a24      	ldr	r2, [pc, #144]	; (1750 <main+0xd8>)
    16be:	1c0b      	adds	r3, r1, #0
    16c0:	cac1      	ldmia	r2!, {r0, r6, r7}
    16c2:	c3c1      	stmia	r3!, {r0, r6, r7}
    16c4:	cac1      	ldmia	r2!, {r0, r6, r7}
    16c6:	c3c1      	stmia	r3!, {r0, r6, r7}
    16c8:	ca41      	ldmia	r2!, {r0, r6}
    16ca:	c341      	stmia	r3!, {r0, r6}
    16cc:	8812      	ldrh	r2, [r2, #0]
    16ce:	801a      	strh	r2, [r3, #0]
		usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    16d0:	4820      	ldr	r0, [pc, #128]	; (1754 <main+0xdc>)
    16d2:	2222      	movs	r2, #34	; 0x22
    16d4:	4b20      	ldr	r3, [pc, #128]	; (1758 <main+0xe0>)
    16d6:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    16d8:	61a5      	str	r5, [r4, #24]
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    16da:	4e20      	ldr	r6, [pc, #128]	; (175c <main+0xe4>)
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
			// Yes, so turn on LED.
				port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
				port_pin_set_output_level(LED_0_PIN, !LED_0_ACTIVE);
				
				uint8_t string[] = "Button Pressed!\r\n";
    16dc:	4f20      	ldr	r7, [pc, #128]	; (1760 <main+0xe8>)
    16de:	46b8      	mov	r8, r7
    16e0:	6a33      	ldr	r3, [r6, #32]
	// Insert application code here, after the board has been initialized.

	// This skeleton code simply sets the LED to the state of the button.
	while (1) {
		// Is button pressed?
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    16e2:	0418      	lsls	r0, r3, #16
    16e4:	d411      	bmi.n	170a <main+0x92>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    16e6:	2380      	movs	r3, #128	; 0x80
    16e8:	05db      	lsls	r3, r3, #23
    16ea:	6163      	str	r3, [r4, #20]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    16ec:	61a3      	str	r3, [r4, #24]
			// Yes, so turn on LED.
				port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
				port_pin_set_output_level(LED_0_PIN, !LED_0_ACTIVE);
				
				uint8_t string[] = "Button Pressed!\r\n";
    16ee:	a901      	add	r1, sp, #4
    16f0:	1c0b      	adds	r3, r1, #0
    16f2:	4642      	mov	r2, r8
    16f4:	caa1      	ldmia	r2!, {r0, r5, r7}
    16f6:	c3a1      	stmia	r3!, {r0, r5, r7}
    16f8:	6815      	ldr	r5, [r2, #0]
    16fa:	601d      	str	r5, [r3, #0]
    16fc:	8892      	ldrh	r2, [r2, #4]
    16fe:	809a      	strh	r2, [r3, #4]
				usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    1700:	4814      	ldr	r0, [pc, #80]	; (1754 <main+0xdc>)
    1702:	2212      	movs	r2, #18
    1704:	4b14      	ldr	r3, [pc, #80]	; (1758 <main+0xe0>)
    1706:	4798      	blx	r3
    1708:	e7ea      	b.n	16e0 <main+0x68>
    170a:	2380      	movs	r3, #128	; 0x80
    170c:	05db      	lsls	r3, r3, #23
    170e:	61a3      	str	r3, [r4, #24]
    1710:	e7e6      	b.n	16e0 <main+0x68>
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	46c0      	nop			; (mov r8, r8)
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	00001388 	.word	0x00001388
    171c:	00000000 	.word	0x00000000
    1720:	00001b57 	.word	0x00001b57
    1724:	00000000 	.word	0x00000000
    1728:	00001b58 	.word	0x00001b58
    172c:	00000000 	.word	0x00000000
    1730:	000014fd 	.word	0x000014fd
    1734:	000015b9 	.word	0x000015b9
    1738:	0000016d 	.word	0x0000016d
    173c:	41004480 	.word	0x41004480
    1740:	000012dd 	.word	0x000012dd
    1744:	00001849 	.word	0x00001849
    1748:	00001809 	.word	0x00001809
    174c:	20000001 	.word	0x20000001
    1750:	00002240 	.word	0x00002240
    1754:	200004b4 	.word	0x200004b4
    1758:	00000d75 	.word	0x00000d75
    175c:	41004400 	.word	0x41004400
    1760:	00002264 	.word	0x00002264
    1764:	46c0      	nop			; (mov r8, r8)
    1766:	46c0      	nop			; (mov r8, r8)

00001768 <__aeabi_uidiv>:
    1768:	2900      	cmp	r1, #0
    176a:	d034      	beq.n	17d6 <.udivsi3_skip_div0_test+0x6a>

0000176c <.udivsi3_skip_div0_test>:
    176c:	2301      	movs	r3, #1
    176e:	2200      	movs	r2, #0
    1770:	b410      	push	{r4}
    1772:	4288      	cmp	r0, r1
    1774:	d32c      	bcc.n	17d0 <.udivsi3_skip_div0_test+0x64>
    1776:	2401      	movs	r4, #1
    1778:	0724      	lsls	r4, r4, #28
    177a:	42a1      	cmp	r1, r4
    177c:	d204      	bcs.n	1788 <.udivsi3_skip_div0_test+0x1c>
    177e:	4281      	cmp	r1, r0
    1780:	d202      	bcs.n	1788 <.udivsi3_skip_div0_test+0x1c>
    1782:	0109      	lsls	r1, r1, #4
    1784:	011b      	lsls	r3, r3, #4
    1786:	e7f8      	b.n	177a <.udivsi3_skip_div0_test+0xe>
    1788:	00e4      	lsls	r4, r4, #3
    178a:	42a1      	cmp	r1, r4
    178c:	d204      	bcs.n	1798 <.udivsi3_skip_div0_test+0x2c>
    178e:	4281      	cmp	r1, r0
    1790:	d202      	bcs.n	1798 <.udivsi3_skip_div0_test+0x2c>
    1792:	0049      	lsls	r1, r1, #1
    1794:	005b      	lsls	r3, r3, #1
    1796:	e7f8      	b.n	178a <.udivsi3_skip_div0_test+0x1e>
    1798:	4288      	cmp	r0, r1
    179a:	d301      	bcc.n	17a0 <.udivsi3_skip_div0_test+0x34>
    179c:	1a40      	subs	r0, r0, r1
    179e:	431a      	orrs	r2, r3
    17a0:	084c      	lsrs	r4, r1, #1
    17a2:	42a0      	cmp	r0, r4
    17a4:	d302      	bcc.n	17ac <.udivsi3_skip_div0_test+0x40>
    17a6:	1b00      	subs	r0, r0, r4
    17a8:	085c      	lsrs	r4, r3, #1
    17aa:	4322      	orrs	r2, r4
    17ac:	088c      	lsrs	r4, r1, #2
    17ae:	42a0      	cmp	r0, r4
    17b0:	d302      	bcc.n	17b8 <.udivsi3_skip_div0_test+0x4c>
    17b2:	1b00      	subs	r0, r0, r4
    17b4:	089c      	lsrs	r4, r3, #2
    17b6:	4322      	orrs	r2, r4
    17b8:	08cc      	lsrs	r4, r1, #3
    17ba:	42a0      	cmp	r0, r4
    17bc:	d302      	bcc.n	17c4 <.udivsi3_skip_div0_test+0x58>
    17be:	1b00      	subs	r0, r0, r4
    17c0:	08dc      	lsrs	r4, r3, #3
    17c2:	4322      	orrs	r2, r4
    17c4:	2800      	cmp	r0, #0
    17c6:	d003      	beq.n	17d0 <.udivsi3_skip_div0_test+0x64>
    17c8:	091b      	lsrs	r3, r3, #4
    17ca:	d001      	beq.n	17d0 <.udivsi3_skip_div0_test+0x64>
    17cc:	0909      	lsrs	r1, r1, #4
    17ce:	e7e3      	b.n	1798 <.udivsi3_skip_div0_test+0x2c>
    17d0:	1c10      	adds	r0, r2, #0
    17d2:	bc10      	pop	{r4}
    17d4:	4770      	bx	lr
    17d6:	2800      	cmp	r0, #0
    17d8:	d001      	beq.n	17de <.udivsi3_skip_div0_test+0x72>
    17da:	2000      	movs	r0, #0
    17dc:	43c0      	mvns	r0, r0
    17de:	b407      	push	{r0, r1, r2}
    17e0:	4802      	ldr	r0, [pc, #8]	; (17ec <.udivsi3_skip_div0_test+0x80>)
    17e2:	a102      	add	r1, pc, #8	; (adr r1, 17ec <.udivsi3_skip_div0_test+0x80>)
    17e4:	1840      	adds	r0, r0, r1
    17e6:	9002      	str	r0, [sp, #8]
    17e8:	bd03      	pop	{r0, r1, pc}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	00000019 	.word	0x00000019

000017f0 <__aeabi_uidivmod>:
    17f0:	2900      	cmp	r1, #0
    17f2:	d0f0      	beq.n	17d6 <.udivsi3_skip_div0_test+0x6a>
    17f4:	b503      	push	{r0, r1, lr}
    17f6:	f7ff ffb9 	bl	176c <.udivsi3_skip_div0_test>
    17fa:	bc0e      	pop	{r1, r2, r3}
    17fc:	4342      	muls	r2, r0
    17fe:	1a89      	subs	r1, r1, r2
    1800:	4718      	bx	r3
    1802:	46c0      	nop			; (mov r8, r8)

00001804 <__aeabi_idiv0>:
    1804:	4770      	bx	lr
    1806:	46c0      	nop			; (mov r8, r8)

00001808 <__aeabi_uldivmod>:
    1808:	2b00      	cmp	r3, #0
    180a:	d111      	bne.n	1830 <__aeabi_uldivmod+0x28>
    180c:	2a00      	cmp	r2, #0
    180e:	d10f      	bne.n	1830 <__aeabi_uldivmod+0x28>
    1810:	2900      	cmp	r1, #0
    1812:	d100      	bne.n	1816 <__aeabi_uldivmod+0xe>
    1814:	2800      	cmp	r0, #0
    1816:	d002      	beq.n	181e <__aeabi_uldivmod+0x16>
    1818:	2100      	movs	r1, #0
    181a:	43c9      	mvns	r1, r1
    181c:	1c08      	adds	r0, r1, #0
    181e:	b407      	push	{r0, r1, r2}
    1820:	4802      	ldr	r0, [pc, #8]	; (182c <__aeabi_uldivmod+0x24>)
    1822:	a102      	add	r1, pc, #8	; (adr r1, 182c <__aeabi_uldivmod+0x24>)
    1824:	1840      	adds	r0, r0, r1
    1826:	9002      	str	r0, [sp, #8]
    1828:	bd03      	pop	{r0, r1, pc}
    182a:	46c0      	nop			; (mov r8, r8)
    182c:	ffffffd9 	.word	0xffffffd9
    1830:	b403      	push	{r0, r1}
    1832:	4668      	mov	r0, sp
    1834:	b501      	push	{r0, lr}
    1836:	9802      	ldr	r0, [sp, #8]
    1838:	f000 f844 	bl	18c4 <__gnu_uldivmod_helper>
    183c:	9b01      	ldr	r3, [sp, #4]
    183e:	469e      	mov	lr, r3
    1840:	b002      	add	sp, #8
    1842:	bc0c      	pop	{r2, r3}
    1844:	4770      	bx	lr
    1846:	46c0      	nop			; (mov r8, r8)

00001848 <__aeabi_lmul>:
    1848:	469c      	mov	ip, r3
    184a:	0403      	lsls	r3, r0, #16
    184c:	b5f0      	push	{r4, r5, r6, r7, lr}
    184e:	0c1b      	lsrs	r3, r3, #16
    1850:	0417      	lsls	r7, r2, #16
    1852:	0c3f      	lsrs	r7, r7, #16
    1854:	0c15      	lsrs	r5, r2, #16
    1856:	1c1e      	adds	r6, r3, #0
    1858:	1c04      	adds	r4, r0, #0
    185a:	0c00      	lsrs	r0, r0, #16
    185c:	437e      	muls	r6, r7
    185e:	436b      	muls	r3, r5
    1860:	4347      	muls	r7, r0
    1862:	4345      	muls	r5, r0
    1864:	18fb      	adds	r3, r7, r3
    1866:	0c30      	lsrs	r0, r6, #16
    1868:	1818      	adds	r0, r3, r0
    186a:	4287      	cmp	r7, r0
    186c:	d902      	bls.n	1874 <__aeabi_lmul+0x2c>
    186e:	2380      	movs	r3, #128	; 0x80
    1870:	025b      	lsls	r3, r3, #9
    1872:	18ed      	adds	r5, r5, r3
    1874:	0c03      	lsrs	r3, r0, #16
    1876:	18ed      	adds	r5, r5, r3
    1878:	4663      	mov	r3, ip
    187a:	435c      	muls	r4, r3
    187c:	434a      	muls	r2, r1
    187e:	0436      	lsls	r6, r6, #16
    1880:	0c36      	lsrs	r6, r6, #16
    1882:	18a1      	adds	r1, r4, r2
    1884:	0400      	lsls	r0, r0, #16
    1886:	1980      	adds	r0, r0, r6
    1888:	1949      	adds	r1, r1, r5
    188a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000188c <__gnu_ldivmod_helper>:
    188c:	b5f0      	push	{r4, r5, r6, r7, lr}
    188e:	b083      	sub	sp, #12
    1890:	1c16      	adds	r6, r2, #0
    1892:	1c1f      	adds	r7, r3, #0
    1894:	9000      	str	r0, [sp, #0]
    1896:	9101      	str	r1, [sp, #4]
    1898:	f000 f82e 	bl	18f8 <__divdi3>
    189c:	1c04      	adds	r4, r0, #0
    189e:	1c0d      	adds	r5, r1, #0
    18a0:	1c22      	adds	r2, r4, #0
    18a2:	1c2b      	adds	r3, r5, #0
    18a4:	1c30      	adds	r0, r6, #0
    18a6:	1c39      	adds	r1, r7, #0
    18a8:	f7ff ffce 	bl	1848 <__aeabi_lmul>
    18ac:	9a00      	ldr	r2, [sp, #0]
    18ae:	9b01      	ldr	r3, [sp, #4]
    18b0:	1a12      	subs	r2, r2, r0
    18b2:	418b      	sbcs	r3, r1
    18b4:	9908      	ldr	r1, [sp, #32]
    18b6:	1c20      	adds	r0, r4, #0
    18b8:	600a      	str	r2, [r1, #0]
    18ba:	604b      	str	r3, [r1, #4]
    18bc:	1c29      	adds	r1, r5, #0
    18be:	b003      	add	sp, #12
    18c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18c2:	46c0      	nop			; (mov r8, r8)

000018c4 <__gnu_uldivmod_helper>:
    18c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18c6:	b083      	sub	sp, #12
    18c8:	1c14      	adds	r4, r2, #0
    18ca:	1c1d      	adds	r5, r3, #0
    18cc:	9000      	str	r0, [sp, #0]
    18ce:	9101      	str	r1, [sp, #4]
    18d0:	f000 f9ea 	bl	1ca8 <__udivdi3>
    18d4:	1c22      	adds	r2, r4, #0
    18d6:	1c2b      	adds	r3, r5, #0
    18d8:	1c06      	adds	r6, r0, #0
    18da:	1c0f      	adds	r7, r1, #0
    18dc:	f7ff ffb4 	bl	1848 <__aeabi_lmul>
    18e0:	9a00      	ldr	r2, [sp, #0]
    18e2:	9b01      	ldr	r3, [sp, #4]
    18e4:	1a12      	subs	r2, r2, r0
    18e6:	418b      	sbcs	r3, r1
    18e8:	9908      	ldr	r1, [sp, #32]
    18ea:	1c30      	adds	r0, r6, #0
    18ec:	600a      	str	r2, [r1, #0]
    18ee:	604b      	str	r3, [r1, #4]
    18f0:	1c39      	adds	r1, r7, #0
    18f2:	b003      	add	sp, #12
    18f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18f6:	46c0      	nop			; (mov r8, r8)

000018f8 <__divdi3>:
    18f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fa:	4644      	mov	r4, r8
    18fc:	465f      	mov	r7, fp
    18fe:	4656      	mov	r6, sl
    1900:	464d      	mov	r5, r9
    1902:	b4f0      	push	{r4, r5, r6, r7}
    1904:	1c1c      	adds	r4, r3, #0
    1906:	b085      	sub	sp, #20
    1908:	2900      	cmp	r1, #0
    190a:	da00      	bge.n	190e <__divdi3+0x16>
    190c:	e0d9      	b.n	1ac2 <__divdi3+0x1ca>
    190e:	1c0f      	adds	r7, r1, #0
    1910:	2100      	movs	r1, #0
    1912:	1c06      	adds	r6, r0, #0
    1914:	468a      	mov	sl, r1
    1916:	1c10      	adds	r0, r2, #0
    1918:	1c19      	adds	r1, r3, #0
    191a:	2c00      	cmp	r4, #0
    191c:	da00      	bge.n	1920 <__divdi3+0x28>
    191e:	e0c7      	b.n	1ab0 <__divdi3+0x1b8>
    1920:	9601      	str	r6, [sp, #4]
    1922:	9000      	str	r0, [sp, #0]
    1924:	4689      	mov	r9, r1
    1926:	4680      	mov	r8, r0
    1928:	2900      	cmp	r1, #0
    192a:	d150      	bne.n	19ce <__divdi3+0xd6>
    192c:	42b8      	cmp	r0, r7
    192e:	d962      	bls.n	19f6 <__divdi3+0xfe>
    1930:	f000 fb7a 	bl	2028 <__clzsi2>
    1934:	2800      	cmp	r0, #0
    1936:	d009      	beq.n	194c <__divdi3+0x54>
    1938:	2320      	movs	r3, #32
    193a:	4645      	mov	r5, r8
    193c:	1c31      	adds	r1, r6, #0
    193e:	1a1b      	subs	r3, r3, r0
    1940:	4085      	lsls	r5, r0
    1942:	4087      	lsls	r7, r0
    1944:	40d9      	lsrs	r1, r3
    1946:	46a8      	mov	r8, r5
    1948:	430f      	orrs	r7, r1
    194a:	4086      	lsls	r6, r0
    194c:	4642      	mov	r2, r8
    194e:	0c14      	lsrs	r4, r2, #16
    1950:	0413      	lsls	r3, r2, #16
    1952:	0c1b      	lsrs	r3, r3, #16
    1954:	1c21      	adds	r1, r4, #0
    1956:	1c38      	adds	r0, r7, #0
    1958:	469b      	mov	fp, r3
    195a:	f7ff ff05 	bl	1768 <__aeabi_uidiv>
    195e:	465b      	mov	r3, fp
    1960:	4343      	muls	r3, r0
    1962:	1c05      	adds	r5, r0, #0
    1964:	1c21      	adds	r1, r4, #0
    1966:	1c38      	adds	r0, r7, #0
    1968:	4699      	mov	r9, r3
    196a:	f7ff ff41 	bl	17f0 <__aeabi_uidivmod>
    196e:	0c33      	lsrs	r3, r6, #16
    1970:	0408      	lsls	r0, r1, #16
    1972:	4318      	orrs	r0, r3
    1974:	4581      	cmp	r9, r0
    1976:	d909      	bls.n	198c <__divdi3+0x94>
    1978:	4440      	add	r0, r8
    197a:	1e6b      	subs	r3, r5, #1
    197c:	4580      	cmp	r8, r0
    197e:	d900      	bls.n	1982 <__divdi3+0x8a>
    1980:	e177      	b.n	1c72 <__divdi3+0x37a>
    1982:	4581      	cmp	r9, r0
    1984:	d800      	bhi.n	1988 <__divdi3+0x90>
    1986:	e174      	b.n	1c72 <__divdi3+0x37a>
    1988:	3d02      	subs	r5, #2
    198a:	4440      	add	r0, r8
    198c:	4649      	mov	r1, r9
    198e:	1a41      	subs	r1, r0, r1
    1990:	4689      	mov	r9, r1
    1992:	1c08      	adds	r0, r1, #0
    1994:	1c21      	adds	r1, r4, #0
    1996:	f7ff fee7 	bl	1768 <__aeabi_uidiv>
    199a:	465a      	mov	r2, fp
    199c:	4342      	muls	r2, r0
    199e:	1c07      	adds	r7, r0, #0
    19a0:	1c21      	adds	r1, r4, #0
    19a2:	4648      	mov	r0, r9
    19a4:	4693      	mov	fp, r2
    19a6:	f7ff ff23 	bl	17f0 <__aeabi_uidivmod>
    19aa:	0436      	lsls	r6, r6, #16
    19ac:	0409      	lsls	r1, r1, #16
    19ae:	0c36      	lsrs	r6, r6, #16
    19b0:	430e      	orrs	r6, r1
    19b2:	45b3      	cmp	fp, r6
    19b4:	d907      	bls.n	19c6 <__divdi3+0xce>
    19b6:	4446      	add	r6, r8
    19b8:	1e7b      	subs	r3, r7, #1
    19ba:	45b0      	cmp	r8, r6
    19bc:	d802      	bhi.n	19c4 <__divdi3+0xcc>
    19be:	3f02      	subs	r7, #2
    19c0:	45b3      	cmp	fp, r6
    19c2:	d800      	bhi.n	19c6 <__divdi3+0xce>
    19c4:	1c1f      	adds	r7, r3, #0
    19c6:	042d      	lsls	r5, r5, #16
    19c8:	432f      	orrs	r7, r5
    19ca:	2400      	movs	r4, #0
    19cc:	e003      	b.n	19d6 <__divdi3+0xde>
    19ce:	42b9      	cmp	r1, r7
    19d0:	d960      	bls.n	1a94 <__divdi3+0x19c>
    19d2:	2400      	movs	r4, #0
    19d4:	2700      	movs	r7, #0
    19d6:	4652      	mov	r2, sl
    19d8:	1c38      	adds	r0, r7, #0
    19da:	1c21      	adds	r1, r4, #0
    19dc:	2a00      	cmp	r2, #0
    19de:	d003      	beq.n	19e8 <__divdi3+0xf0>
    19e0:	1c3b      	adds	r3, r7, #0
    19e2:	2100      	movs	r1, #0
    19e4:	4258      	negs	r0, r3
    19e6:	41a1      	sbcs	r1, r4
    19e8:	b005      	add	sp, #20
    19ea:	bc3c      	pop	{r2, r3, r4, r5}
    19ec:	4690      	mov	r8, r2
    19ee:	4699      	mov	r9, r3
    19f0:	46a2      	mov	sl, r4
    19f2:	46ab      	mov	fp, r5
    19f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19f6:	2800      	cmp	r0, #0
    19f8:	d104      	bne.n	1a04 <__divdi3+0x10c>
    19fa:	2001      	movs	r0, #1
    19fc:	2100      	movs	r1, #0
    19fe:	f7ff feb3 	bl	1768 <__aeabi_uidiv>
    1a02:	4680      	mov	r8, r0
    1a04:	4640      	mov	r0, r8
    1a06:	f000 fb0f 	bl	2028 <__clzsi2>
    1a0a:	2800      	cmp	r0, #0
    1a0c:	d160      	bne.n	1ad0 <__divdi3+0x1d8>
    1a0e:	4641      	mov	r1, r8
    1a10:	4644      	mov	r4, r8
    1a12:	040b      	lsls	r3, r1, #16
    1a14:	1b3c      	subs	r4, r7, r4
    1a16:	0c1b      	lsrs	r3, r3, #16
    1a18:	46a3      	mov	fp, r4
    1a1a:	0c0d      	lsrs	r5, r1, #16
    1a1c:	9300      	str	r3, [sp, #0]
    1a1e:	2401      	movs	r4, #1
    1a20:	1c29      	adds	r1, r5, #0
    1a22:	4658      	mov	r0, fp
    1a24:	f7ff fea0 	bl	1768 <__aeabi_uidiv>
    1a28:	9f00      	ldr	r7, [sp, #0]
    1a2a:	4681      	mov	r9, r0
    1a2c:	4347      	muls	r7, r0
    1a2e:	1c29      	adds	r1, r5, #0
    1a30:	4658      	mov	r0, fp
    1a32:	f7ff fedd 	bl	17f0 <__aeabi_uidivmod>
    1a36:	0c33      	lsrs	r3, r6, #16
    1a38:	0409      	lsls	r1, r1, #16
    1a3a:	4319      	orrs	r1, r3
    1a3c:	428f      	cmp	r7, r1
    1a3e:	d908      	bls.n	1a52 <__divdi3+0x15a>
    1a40:	464b      	mov	r3, r9
    1a42:	4441      	add	r1, r8
    1a44:	3b01      	subs	r3, #1
    1a46:	4588      	cmp	r8, r1
    1a48:	d802      	bhi.n	1a50 <__divdi3+0x158>
    1a4a:	428f      	cmp	r7, r1
    1a4c:	d900      	bls.n	1a50 <__divdi3+0x158>
    1a4e:	e125      	b.n	1c9c <__divdi3+0x3a4>
    1a50:	4699      	mov	r9, r3
    1a52:	1bc9      	subs	r1, r1, r7
    1a54:	468b      	mov	fp, r1
    1a56:	1c08      	adds	r0, r1, #0
    1a58:	1c29      	adds	r1, r5, #0
    1a5a:	f7ff fe85 	bl	1768 <__aeabi_uidiv>
    1a5e:	9b00      	ldr	r3, [sp, #0]
    1a60:	1c29      	adds	r1, r5, #0
    1a62:	4343      	muls	r3, r0
    1a64:	1c07      	adds	r7, r0, #0
    1a66:	4658      	mov	r0, fp
    1a68:	9300      	str	r3, [sp, #0]
    1a6a:	f7ff fec1 	bl	17f0 <__aeabi_uidivmod>
    1a6e:	0436      	lsls	r6, r6, #16
    1a70:	9d00      	ldr	r5, [sp, #0]
    1a72:	0409      	lsls	r1, r1, #16
    1a74:	0c36      	lsrs	r6, r6, #16
    1a76:	430e      	orrs	r6, r1
    1a78:	42b5      	cmp	r5, r6
    1a7a:	d907      	bls.n	1a8c <__divdi3+0x194>
    1a7c:	4446      	add	r6, r8
    1a7e:	1e7b      	subs	r3, r7, #1
    1a80:	45b0      	cmp	r8, r6
    1a82:	d802      	bhi.n	1a8a <__divdi3+0x192>
    1a84:	3f02      	subs	r7, #2
    1a86:	42b5      	cmp	r5, r6
    1a88:	d800      	bhi.n	1a8c <__divdi3+0x194>
    1a8a:	1c1f      	adds	r7, r3, #0
    1a8c:	4649      	mov	r1, r9
    1a8e:	040b      	lsls	r3, r1, #16
    1a90:	431f      	orrs	r7, r3
    1a92:	e7a0      	b.n	19d6 <__divdi3+0xde>
    1a94:	1c08      	adds	r0, r1, #0
    1a96:	f000 fac7 	bl	2028 <__clzsi2>
    1a9a:	1e04      	subs	r4, r0, #0
    1a9c:	d170      	bne.n	1b80 <__divdi3+0x288>
    1a9e:	45b9      	cmp	r9, r7
    1aa0:	d303      	bcc.n	1aaa <__divdi3+0x1b2>
    1aa2:	9c00      	ldr	r4, [sp, #0]
    1aa4:	9d01      	ldr	r5, [sp, #4]
    1aa6:	42ac      	cmp	r4, r5
    1aa8:	d893      	bhi.n	19d2 <__divdi3+0xda>
    1aaa:	2400      	movs	r4, #0
    1aac:	2701      	movs	r7, #1
    1aae:	e792      	b.n	19d6 <__divdi3+0xde>
    1ab0:	4652      	mov	r2, sl
    1ab2:	43d2      	mvns	r2, r2
    1ab4:	1c03      	adds	r3, r0, #0
    1ab6:	1c0c      	adds	r4, r1, #0
    1ab8:	4692      	mov	sl, r2
    1aba:	2100      	movs	r1, #0
    1abc:	4258      	negs	r0, r3
    1abe:	41a1      	sbcs	r1, r4
    1ac0:	e72e      	b.n	1920 <__divdi3+0x28>
    1ac2:	2700      	movs	r7, #0
    1ac4:	4246      	negs	r6, r0
    1ac6:	418f      	sbcs	r7, r1
    1ac8:	2101      	movs	r1, #1
    1aca:	4249      	negs	r1, r1
    1acc:	468a      	mov	sl, r1
    1ace:	e722      	b.n	1916 <__divdi3+0x1e>
    1ad0:	2320      	movs	r3, #32
    1ad2:	1a1b      	subs	r3, r3, r0
    1ad4:	4642      	mov	r2, r8
    1ad6:	1c35      	adds	r5, r6, #0
    1ad8:	4082      	lsls	r2, r0
    1ada:	1c3c      	adds	r4, r7, #0
    1adc:	40dd      	lsrs	r5, r3
    1ade:	40dc      	lsrs	r4, r3
    1ae0:	4087      	lsls	r7, r0
    1ae2:	1c2b      	adds	r3, r5, #0
    1ae4:	0c15      	lsrs	r5, r2, #16
    1ae6:	433b      	orrs	r3, r7
    1ae8:	1c29      	adds	r1, r5, #0
    1aea:	4086      	lsls	r6, r0
    1aec:	1c20      	adds	r0, r4, #0
    1aee:	9300      	str	r3, [sp, #0]
    1af0:	0417      	lsls	r7, r2, #16
    1af2:	4690      	mov	r8, r2
    1af4:	f7ff fe38 	bl	1768 <__aeabi_uidiv>
    1af8:	0c3f      	lsrs	r7, r7, #16
    1afa:	1c01      	adds	r1, r0, #0
    1afc:	4379      	muls	r1, r7
    1afe:	4681      	mov	r9, r0
    1b00:	468b      	mov	fp, r1
    1b02:	1c20      	adds	r0, r4, #0
    1b04:	1c29      	adds	r1, r5, #0
    1b06:	f7ff fe73 	bl	17f0 <__aeabi_uidivmod>
    1b0a:	9c00      	ldr	r4, [sp, #0]
    1b0c:	0409      	lsls	r1, r1, #16
    1b0e:	0c23      	lsrs	r3, r4, #16
    1b10:	4319      	orrs	r1, r3
    1b12:	458b      	cmp	fp, r1
    1b14:	d90c      	bls.n	1b30 <__divdi3+0x238>
    1b16:	464b      	mov	r3, r9
    1b18:	4441      	add	r1, r8
    1b1a:	3b01      	subs	r3, #1
    1b1c:	4588      	cmp	r8, r1
    1b1e:	d900      	bls.n	1b22 <__divdi3+0x22a>
    1b20:	e0ba      	b.n	1c98 <__divdi3+0x3a0>
    1b22:	458b      	cmp	fp, r1
    1b24:	d800      	bhi.n	1b28 <__divdi3+0x230>
    1b26:	e0b7      	b.n	1c98 <__divdi3+0x3a0>
    1b28:	2202      	movs	r2, #2
    1b2a:	4252      	negs	r2, r2
    1b2c:	4491      	add	r9, r2
    1b2e:	4441      	add	r1, r8
    1b30:	465c      	mov	r4, fp
    1b32:	1b0c      	subs	r4, r1, r4
    1b34:	1c20      	adds	r0, r4, #0
    1b36:	1c29      	adds	r1, r5, #0
    1b38:	9401      	str	r4, [sp, #4]
    1b3a:	f7ff fe15 	bl	1768 <__aeabi_uidiv>
    1b3e:	1c39      	adds	r1, r7, #0
    1b40:	4341      	muls	r1, r0
    1b42:	1c04      	adds	r4, r0, #0
    1b44:	468b      	mov	fp, r1
    1b46:	9801      	ldr	r0, [sp, #4]
    1b48:	1c29      	adds	r1, r5, #0
    1b4a:	f7ff fe51 	bl	17f0 <__aeabi_uidivmod>
    1b4e:	9a00      	ldr	r2, [sp, #0]
    1b50:	0409      	lsls	r1, r1, #16
    1b52:	0413      	lsls	r3, r2, #16
    1b54:	0c1b      	lsrs	r3, r3, #16
    1b56:	4319      	orrs	r1, r3
    1b58:	458b      	cmp	fp, r1
    1b5a:	d909      	bls.n	1b70 <__divdi3+0x278>
    1b5c:	4441      	add	r1, r8
    1b5e:	1e63      	subs	r3, r4, #1
    1b60:	4588      	cmp	r8, r1
    1b62:	d900      	bls.n	1b66 <__divdi3+0x26e>
    1b64:	e094      	b.n	1c90 <__divdi3+0x398>
    1b66:	458b      	cmp	fp, r1
    1b68:	d800      	bhi.n	1b6c <__divdi3+0x274>
    1b6a:	e091      	b.n	1c90 <__divdi3+0x398>
    1b6c:	3c02      	subs	r4, #2
    1b6e:	4441      	add	r1, r8
    1b70:	465b      	mov	r3, fp
    1b72:	1acb      	subs	r3, r1, r3
    1b74:	4649      	mov	r1, r9
    1b76:	469b      	mov	fp, r3
    1b78:	040b      	lsls	r3, r1, #16
    1b7a:	431c      	orrs	r4, r3
    1b7c:	9700      	str	r7, [sp, #0]
    1b7e:	e74f      	b.n	1a20 <__divdi3+0x128>
    1b80:	9d00      	ldr	r5, [sp, #0]
    1b82:	2320      	movs	r3, #32
    1b84:	1a1b      	subs	r3, r3, r0
    1b86:	464a      	mov	r2, r9
    1b88:	9900      	ldr	r1, [sp, #0]
    1b8a:	4082      	lsls	r2, r0
    1b8c:	40dd      	lsrs	r5, r3
    1b8e:	4315      	orrs	r5, r2
    1b90:	4081      	lsls	r1, r0
    1b92:	1c3a      	adds	r2, r7, #0
    1b94:	40da      	lsrs	r2, r3
    1b96:	9100      	str	r1, [sp, #0]
    1b98:	1c31      	adds	r1, r6, #0
    1b9a:	4690      	mov	r8, r2
    1b9c:	40d9      	lsrs	r1, r3
    1b9e:	1c3a      	adds	r2, r7, #0
    1ba0:	4082      	lsls	r2, r0
    1ba2:	1c0b      	adds	r3, r1, #0
    1ba4:	4313      	orrs	r3, r2
    1ba6:	9301      	str	r3, [sp, #4]
    1ba8:	0c2f      	lsrs	r7, r5, #16
    1baa:	042b      	lsls	r3, r5, #16
    1bac:	0c1b      	lsrs	r3, r3, #16
    1bae:	1c39      	adds	r1, r7, #0
    1bb0:	4640      	mov	r0, r8
    1bb2:	9302      	str	r3, [sp, #8]
    1bb4:	f7ff fdd8 	bl	1768 <__aeabi_uidiv>
    1bb8:	9a02      	ldr	r2, [sp, #8]
    1bba:	4681      	mov	r9, r0
    1bbc:	4342      	muls	r2, r0
    1bbe:	1c39      	adds	r1, r7, #0
    1bc0:	4640      	mov	r0, r8
    1bc2:	4693      	mov	fp, r2
    1bc4:	f7ff fe14 	bl	17f0 <__aeabi_uidivmod>
    1bc8:	9a01      	ldr	r2, [sp, #4]
    1bca:	0409      	lsls	r1, r1, #16
    1bcc:	0c13      	lsrs	r3, r2, #16
    1bce:	4319      	orrs	r1, r3
    1bd0:	458b      	cmp	fp, r1
    1bd2:	d90a      	bls.n	1bea <__divdi3+0x2f2>
    1bd4:	464b      	mov	r3, r9
    1bd6:	1949      	adds	r1, r1, r5
    1bd8:	3b01      	subs	r3, #1
    1bda:	428d      	cmp	r5, r1
    1bdc:	d85a      	bhi.n	1c94 <__divdi3+0x39c>
    1bde:	458b      	cmp	fp, r1
    1be0:	d958      	bls.n	1c94 <__divdi3+0x39c>
    1be2:	2302      	movs	r3, #2
    1be4:	425b      	negs	r3, r3
    1be6:	4499      	add	r9, r3
    1be8:	1949      	adds	r1, r1, r5
    1bea:	465a      	mov	r2, fp
    1bec:	1a8a      	subs	r2, r1, r2
    1bee:	1c10      	adds	r0, r2, #0
    1bf0:	1c39      	adds	r1, r7, #0
    1bf2:	9203      	str	r2, [sp, #12]
    1bf4:	f7ff fdb8 	bl	1768 <__aeabi_uidiv>
    1bf8:	9b02      	ldr	r3, [sp, #8]
    1bfa:	4680      	mov	r8, r0
    1bfc:	4343      	muls	r3, r0
    1bfe:	1c39      	adds	r1, r7, #0
    1c00:	9803      	ldr	r0, [sp, #12]
    1c02:	469b      	mov	fp, r3
    1c04:	f7ff fdf4 	bl	17f0 <__aeabi_uidivmod>
    1c08:	9a01      	ldr	r2, [sp, #4]
    1c0a:	0409      	lsls	r1, r1, #16
    1c0c:	0413      	lsls	r3, r2, #16
    1c0e:	0c1b      	lsrs	r3, r3, #16
    1c10:	4319      	orrs	r1, r3
    1c12:	458b      	cmp	fp, r1
    1c14:	d90a      	bls.n	1c2c <__divdi3+0x334>
    1c16:	4643      	mov	r3, r8
    1c18:	1949      	adds	r1, r1, r5
    1c1a:	3b01      	subs	r3, #1
    1c1c:	428d      	cmp	r5, r1
    1c1e:	d835      	bhi.n	1c8c <__divdi3+0x394>
    1c20:	458b      	cmp	fp, r1
    1c22:	d933      	bls.n	1c8c <__divdi3+0x394>
    1c24:	2302      	movs	r3, #2
    1c26:	425b      	negs	r3, r3
    1c28:	4498      	add	r8, r3
    1c2a:	1949      	adds	r1, r1, r5
    1c2c:	465d      	mov	r5, fp
    1c2e:	1b4d      	subs	r5, r1, r5
    1c30:	46ab      	mov	fp, r5
    1c32:	4649      	mov	r1, r9
    1c34:	9d00      	ldr	r5, [sp, #0]
    1c36:	040f      	lsls	r7, r1, #16
    1c38:	4642      	mov	r2, r8
    1c3a:	4317      	orrs	r7, r2
    1c3c:	042a      	lsls	r2, r5, #16
    1c3e:	0c12      	lsrs	r2, r2, #16
    1c40:	043b      	lsls	r3, r7, #16
    1c42:	0c2d      	lsrs	r5, r5, #16
    1c44:	0c1b      	lsrs	r3, r3, #16
    1c46:	0c38      	lsrs	r0, r7, #16
    1c48:	1c11      	adds	r1, r2, #0
    1c4a:	4359      	muls	r1, r3
    1c4c:	4342      	muls	r2, r0
    1c4e:	436b      	muls	r3, r5
    1c50:	4368      	muls	r0, r5
    1c52:	18d3      	adds	r3, r2, r3
    1c54:	0c0d      	lsrs	r5, r1, #16
    1c56:	195b      	adds	r3, r3, r5
    1c58:	468c      	mov	ip, r1
    1c5a:	429a      	cmp	r2, r3
    1c5c:	d902      	bls.n	1c64 <__divdi3+0x36c>
    1c5e:	2280      	movs	r2, #128	; 0x80
    1c60:	0252      	lsls	r2, r2, #9
    1c62:	1880      	adds	r0, r0, r2
    1c64:	0c1d      	lsrs	r5, r3, #16
    1c66:	1940      	adds	r0, r0, r5
    1c68:	4583      	cmp	fp, r0
    1c6a:	d30c      	bcc.n	1c86 <__divdi3+0x38e>
    1c6c:	d003      	beq.n	1c76 <__divdi3+0x37e>
    1c6e:	2400      	movs	r4, #0
    1c70:	e6b1      	b.n	19d6 <__divdi3+0xde>
    1c72:	1c1d      	adds	r5, r3, #0
    1c74:	e68a      	b.n	198c <__divdi3+0x94>
    1c76:	4665      	mov	r5, ip
    1c78:	042a      	lsls	r2, r5, #16
    1c7a:	041b      	lsls	r3, r3, #16
    1c7c:	0c12      	lsrs	r2, r2, #16
    1c7e:	189b      	adds	r3, r3, r2
    1c80:	40a6      	lsls	r6, r4
    1c82:	429e      	cmp	r6, r3
    1c84:	d2f3      	bcs.n	1c6e <__divdi3+0x376>
    1c86:	3f01      	subs	r7, #1
    1c88:	2400      	movs	r4, #0
    1c8a:	e6a4      	b.n	19d6 <__divdi3+0xde>
    1c8c:	4698      	mov	r8, r3
    1c8e:	e7cd      	b.n	1c2c <__divdi3+0x334>
    1c90:	1c1c      	adds	r4, r3, #0
    1c92:	e76d      	b.n	1b70 <__divdi3+0x278>
    1c94:	4699      	mov	r9, r3
    1c96:	e7a8      	b.n	1bea <__divdi3+0x2f2>
    1c98:	4699      	mov	r9, r3
    1c9a:	e749      	b.n	1b30 <__divdi3+0x238>
    1c9c:	2202      	movs	r2, #2
    1c9e:	4252      	negs	r2, r2
    1ca0:	4491      	add	r9, r2
    1ca2:	4441      	add	r1, r8
    1ca4:	e6d5      	b.n	1a52 <__divdi3+0x15a>
    1ca6:	46c0      	nop			; (mov r8, r8)

00001ca8 <__udivdi3>:
    1ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1caa:	465f      	mov	r7, fp
    1cac:	4656      	mov	r6, sl
    1cae:	464d      	mov	r5, r9
    1cb0:	4644      	mov	r4, r8
    1cb2:	b4f0      	push	{r4, r5, r6, r7}
    1cb4:	1c0d      	adds	r5, r1, #0
    1cb6:	b085      	sub	sp, #20
    1cb8:	1c06      	adds	r6, r0, #0
    1cba:	4692      	mov	sl, r2
    1cbc:	4698      	mov	r8, r3
    1cbe:	9002      	str	r0, [sp, #8]
    1cc0:	9101      	str	r1, [sp, #4]
    1cc2:	9203      	str	r2, [sp, #12]
    1cc4:	1c1f      	adds	r7, r3, #0
    1cc6:	1c14      	adds	r4, r2, #0
    1cc8:	4683      	mov	fp, r0
    1cca:	46a9      	mov	r9, r5
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d152      	bne.n	1d76 <__udivdi3+0xce>
    1cd0:	42aa      	cmp	r2, r5
    1cd2:	d96b      	bls.n	1dac <__udivdi3+0x104>
    1cd4:	1c10      	adds	r0, r2, #0
    1cd6:	f000 f9a7 	bl	2028 <__clzsi2>
    1cda:	2800      	cmp	r0, #0
    1cdc:	d00a      	beq.n	1cf4 <__udivdi3+0x4c>
    1cde:	2320      	movs	r3, #32
    1ce0:	1a1b      	subs	r3, r3, r0
    1ce2:	1c31      	adds	r1, r6, #0
    1ce4:	40d9      	lsrs	r1, r3
    1ce6:	4085      	lsls	r5, r0
    1ce8:	1c0b      	adds	r3, r1, #0
    1cea:	432b      	orrs	r3, r5
    1cec:	4086      	lsls	r6, r0
    1cee:	4084      	lsls	r4, r0
    1cf0:	4699      	mov	r9, r3
    1cf2:	46b3      	mov	fp, r6
    1cf4:	0c25      	lsrs	r5, r4, #16
    1cf6:	0423      	lsls	r3, r4, #16
    1cf8:	0c1b      	lsrs	r3, r3, #16
    1cfa:	1c29      	adds	r1, r5, #0
    1cfc:	4648      	mov	r0, r9
    1cfe:	4698      	mov	r8, r3
    1d00:	f7ff fd32 	bl	1768 <__aeabi_uidiv>
    1d04:	4646      	mov	r6, r8
    1d06:	1c07      	adds	r7, r0, #0
    1d08:	4346      	muls	r6, r0
    1d0a:	1c29      	adds	r1, r5, #0
    1d0c:	4648      	mov	r0, r9
    1d0e:	f7ff fd6f 	bl	17f0 <__aeabi_uidivmod>
    1d12:	465a      	mov	r2, fp
    1d14:	0409      	lsls	r1, r1, #16
    1d16:	0c13      	lsrs	r3, r2, #16
    1d18:	4319      	orrs	r1, r3
    1d1a:	428e      	cmp	r6, r1
    1d1c:	d909      	bls.n	1d32 <__udivdi3+0x8a>
    1d1e:	1909      	adds	r1, r1, r4
    1d20:	1e7b      	subs	r3, r7, #1
    1d22:	428c      	cmp	r4, r1
    1d24:	d900      	bls.n	1d28 <__udivdi3+0x80>
    1d26:	e159      	b.n	1fdc <__udivdi3+0x334>
    1d28:	428e      	cmp	r6, r1
    1d2a:	d800      	bhi.n	1d2e <__udivdi3+0x86>
    1d2c:	e156      	b.n	1fdc <__udivdi3+0x334>
    1d2e:	3f02      	subs	r7, #2
    1d30:	1909      	adds	r1, r1, r4
    1d32:	1b89      	subs	r1, r1, r6
    1d34:	4689      	mov	r9, r1
    1d36:	1c08      	adds	r0, r1, #0
    1d38:	1c29      	adds	r1, r5, #0
    1d3a:	f7ff fd15 	bl	1768 <__aeabi_uidiv>
    1d3e:	4643      	mov	r3, r8
    1d40:	4343      	muls	r3, r0
    1d42:	1c06      	adds	r6, r0, #0
    1d44:	1c29      	adds	r1, r5, #0
    1d46:	4648      	mov	r0, r9
    1d48:	4698      	mov	r8, r3
    1d4a:	f7ff fd51 	bl	17f0 <__aeabi_uidivmod>
    1d4e:	465a      	mov	r2, fp
    1d50:	0413      	lsls	r3, r2, #16
    1d52:	0409      	lsls	r1, r1, #16
    1d54:	0c1b      	lsrs	r3, r3, #16
    1d56:	4319      	orrs	r1, r3
    1d58:	4588      	cmp	r8, r1
    1d5a:	d908      	bls.n	1d6e <__udivdi3+0xc6>
    1d5c:	1909      	adds	r1, r1, r4
    1d5e:	1e73      	subs	r3, r6, #1
    1d60:	428c      	cmp	r4, r1
    1d62:	d900      	bls.n	1d66 <__udivdi3+0xbe>
    1d64:	e138      	b.n	1fd8 <__udivdi3+0x330>
    1d66:	3e02      	subs	r6, #2
    1d68:	4588      	cmp	r8, r1
    1d6a:	d800      	bhi.n	1d6e <__udivdi3+0xc6>
    1d6c:	e134      	b.n	1fd8 <__udivdi3+0x330>
    1d6e:	0438      	lsls	r0, r7, #16
    1d70:	4330      	orrs	r0, r6
    1d72:	2700      	movs	r7, #0
    1d74:	e012      	b.n	1d9c <__udivdi3+0xf4>
    1d76:	9a01      	ldr	r2, [sp, #4]
    1d78:	4293      	cmp	r3, r2
    1d7a:	d80d      	bhi.n	1d98 <__udivdi3+0xf0>
    1d7c:	1c18      	adds	r0, r3, #0
    1d7e:	f000 f953 	bl	2028 <__clzsi2>
    1d82:	1e04      	subs	r4, r0, #0
    1d84:	d166      	bne.n	1e54 <__udivdi3+0x1ac>
    1d86:	9b01      	ldr	r3, [sp, #4]
    1d88:	429f      	cmp	r7, r3
    1d8a:	d200      	bcs.n	1d8e <__udivdi3+0xe6>
    1d8c:	e121      	b.n	1fd2 <__udivdi3+0x32a>
    1d8e:	9f03      	ldr	r7, [sp, #12]
    1d90:	9902      	ldr	r1, [sp, #8]
    1d92:	428f      	cmp	r7, r1
    1d94:	d800      	bhi.n	1d98 <__udivdi3+0xf0>
    1d96:	e11c      	b.n	1fd2 <__udivdi3+0x32a>
    1d98:	2700      	movs	r7, #0
    1d9a:	2000      	movs	r0, #0
    1d9c:	1c39      	adds	r1, r7, #0
    1d9e:	b005      	add	sp, #20
    1da0:	bc3c      	pop	{r2, r3, r4, r5}
    1da2:	4690      	mov	r8, r2
    1da4:	4699      	mov	r9, r3
    1da6:	46a2      	mov	sl, r4
    1da8:	46ab      	mov	fp, r5
    1daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dac:	2a00      	cmp	r2, #0
    1dae:	d104      	bne.n	1dba <__udivdi3+0x112>
    1db0:	2001      	movs	r0, #1
    1db2:	2100      	movs	r1, #0
    1db4:	f7ff fcd8 	bl	1768 <__aeabi_uidiv>
    1db8:	1c04      	adds	r4, r0, #0
    1dba:	1c20      	adds	r0, r4, #0
    1dbc:	f000 f934 	bl	2028 <__clzsi2>
    1dc0:	2800      	cmp	r0, #0
    1dc2:	d000      	beq.n	1dc6 <__udivdi3+0x11e>
    1dc4:	e0b6      	b.n	1f34 <__udivdi3+0x28c>
    1dc6:	0423      	lsls	r3, r4, #16
    1dc8:	1b2d      	subs	r5, r5, r4
    1dca:	0c1b      	lsrs	r3, r3, #16
    1dcc:	46a9      	mov	r9, r5
    1dce:	0c26      	lsrs	r6, r4, #16
    1dd0:	4698      	mov	r8, r3
    1dd2:	2701      	movs	r7, #1
    1dd4:	1c31      	adds	r1, r6, #0
    1dd6:	4648      	mov	r0, r9
    1dd8:	f7ff fcc6 	bl	1768 <__aeabi_uidiv>
    1ddc:	4641      	mov	r1, r8
    1dde:	4341      	muls	r1, r0
    1de0:	1c05      	adds	r5, r0, #0
    1de2:	468a      	mov	sl, r1
    1de4:	4648      	mov	r0, r9
    1de6:	1c31      	adds	r1, r6, #0
    1de8:	f7ff fd02 	bl	17f0 <__aeabi_uidivmod>
    1dec:	465a      	mov	r2, fp
    1dee:	0408      	lsls	r0, r1, #16
    1df0:	0c13      	lsrs	r3, r2, #16
    1df2:	4318      	orrs	r0, r3
    1df4:	4582      	cmp	sl, r0
    1df6:	d907      	bls.n	1e08 <__udivdi3+0x160>
    1df8:	1900      	adds	r0, r0, r4
    1dfa:	1e6b      	subs	r3, r5, #1
    1dfc:	4284      	cmp	r4, r0
    1dfe:	d802      	bhi.n	1e06 <__udivdi3+0x15e>
    1e00:	4582      	cmp	sl, r0
    1e02:	d900      	bls.n	1e06 <__udivdi3+0x15e>
    1e04:	e10d      	b.n	2022 <STACK_SIZE+0x22>
    1e06:	1c1d      	adds	r5, r3, #0
    1e08:	4653      	mov	r3, sl
    1e0a:	1ac3      	subs	r3, r0, r3
    1e0c:	1c18      	adds	r0, r3, #0
    1e0e:	1c31      	adds	r1, r6, #0
    1e10:	469a      	mov	sl, r3
    1e12:	f7ff fca9 	bl	1768 <__aeabi_uidiv>
    1e16:	4641      	mov	r1, r8
    1e18:	4341      	muls	r1, r0
    1e1a:	4681      	mov	r9, r0
    1e1c:	4688      	mov	r8, r1
    1e1e:	4650      	mov	r0, sl
    1e20:	1c31      	adds	r1, r6, #0
    1e22:	f7ff fce5 	bl	17f0 <__aeabi_uidivmod>
    1e26:	465a      	mov	r2, fp
    1e28:	0413      	lsls	r3, r2, #16
    1e2a:	0409      	lsls	r1, r1, #16
    1e2c:	0c1b      	lsrs	r3, r3, #16
    1e2e:	4319      	orrs	r1, r3
    1e30:	4588      	cmp	r8, r1
    1e32:	d90b      	bls.n	1e4c <__udivdi3+0x1a4>
    1e34:	464b      	mov	r3, r9
    1e36:	1909      	adds	r1, r1, r4
    1e38:	3b01      	subs	r3, #1
    1e3a:	428c      	cmp	r4, r1
    1e3c:	d900      	bls.n	1e40 <__udivdi3+0x198>
    1e3e:	e0cf      	b.n	1fe0 <__udivdi3+0x338>
    1e40:	4588      	cmp	r8, r1
    1e42:	d800      	bhi.n	1e46 <__udivdi3+0x19e>
    1e44:	e0cc      	b.n	1fe0 <__udivdi3+0x338>
    1e46:	2302      	movs	r3, #2
    1e48:	425b      	negs	r3, r3
    1e4a:	4499      	add	r9, r3
    1e4c:	0428      	lsls	r0, r5, #16
    1e4e:	4649      	mov	r1, r9
    1e50:	4308      	orrs	r0, r1
    1e52:	e7a3      	b.n	1d9c <__udivdi3+0xf4>
    1e54:	2320      	movs	r3, #32
    1e56:	1a1b      	subs	r3, r3, r0
    1e58:	4642      	mov	r2, r8
    1e5a:	4657      	mov	r7, sl
    1e5c:	4082      	lsls	r2, r0
    1e5e:	40df      	lsrs	r7, r3
    1e60:	4317      	orrs	r7, r2
    1e62:	4652      	mov	r2, sl
    1e64:	4082      	lsls	r2, r0
    1e66:	9201      	str	r2, [sp, #4]
    1e68:	1c32      	adds	r2, r6, #0
    1e6a:	40da      	lsrs	r2, r3
    1e6c:	1c29      	adds	r1, r5, #0
    1e6e:	40d9      	lsrs	r1, r3
    1e70:	4085      	lsls	r5, r0
    1e72:	1c13      	adds	r3, r2, #0
    1e74:	432b      	orrs	r3, r5
    1e76:	9302      	str	r3, [sp, #8]
    1e78:	0c3d      	lsrs	r5, r7, #16
    1e7a:	043b      	lsls	r3, r7, #16
    1e7c:	0c1b      	lsrs	r3, r3, #16
    1e7e:	4688      	mov	r8, r1
    1e80:	1c08      	adds	r0, r1, #0
    1e82:	1c29      	adds	r1, r5, #0
    1e84:	469a      	mov	sl, r3
    1e86:	f7ff fc6f 	bl	1768 <__aeabi_uidiv>
    1e8a:	4653      	mov	r3, sl
    1e8c:	4343      	muls	r3, r0
    1e8e:	4681      	mov	r9, r0
    1e90:	1c29      	adds	r1, r5, #0
    1e92:	4640      	mov	r0, r8
    1e94:	469b      	mov	fp, r3
    1e96:	f7ff fcab 	bl	17f0 <__aeabi_uidivmod>
    1e9a:	9a02      	ldr	r2, [sp, #8]
    1e9c:	0409      	lsls	r1, r1, #16
    1e9e:	0c13      	lsrs	r3, r2, #16
    1ea0:	4319      	orrs	r1, r3
    1ea2:	458b      	cmp	fp, r1
    1ea4:	d906      	bls.n	1eb4 <__udivdi3+0x20c>
    1ea6:	464b      	mov	r3, r9
    1ea8:	19c9      	adds	r1, r1, r7
    1eaa:	3b01      	subs	r3, #1
    1eac:	428f      	cmp	r7, r1
    1eae:	d800      	bhi.n	1eb2 <__udivdi3+0x20a>
    1eb0:	e0ab      	b.n	200a <STACK_SIZE+0xa>
    1eb2:	4699      	mov	r9, r3
    1eb4:	465a      	mov	r2, fp
    1eb6:	1a8a      	subs	r2, r1, r2
    1eb8:	1c10      	adds	r0, r2, #0
    1eba:	1c29      	adds	r1, r5, #0
    1ebc:	4693      	mov	fp, r2
    1ebe:	f7ff fc53 	bl	1768 <__aeabi_uidiv>
    1ec2:	4653      	mov	r3, sl
    1ec4:	4343      	muls	r3, r0
    1ec6:	1c29      	adds	r1, r5, #0
    1ec8:	4680      	mov	r8, r0
    1eca:	4658      	mov	r0, fp
    1ecc:	469a      	mov	sl, r3
    1ece:	f7ff fc8f 	bl	17f0 <__aeabi_uidivmod>
    1ed2:	9a02      	ldr	r2, [sp, #8]
    1ed4:	0409      	lsls	r1, r1, #16
    1ed6:	0415      	lsls	r5, r2, #16
    1ed8:	0c2d      	lsrs	r5, r5, #16
    1eda:	4329      	orrs	r1, r5
    1edc:	458a      	cmp	sl, r1
    1ede:	d906      	bls.n	1eee <__udivdi3+0x246>
    1ee0:	4643      	mov	r3, r8
    1ee2:	19c9      	adds	r1, r1, r7
    1ee4:	3b01      	subs	r3, #1
    1ee6:	428f      	cmp	r7, r1
    1ee8:	d800      	bhi.n	1eec <__udivdi3+0x244>
    1eea:	e086      	b.n	1ffa <__udivdi3+0x352>
    1eec:	4698      	mov	r8, r3
    1eee:	4657      	mov	r7, sl
    1ef0:	1bcf      	subs	r7, r1, r7
    1ef2:	46ba      	mov	sl, r7
    1ef4:	4649      	mov	r1, r9
    1ef6:	9f01      	ldr	r7, [sp, #4]
    1ef8:	0408      	lsls	r0, r1, #16
    1efa:	4642      	mov	r2, r8
    1efc:	4310      	orrs	r0, r2
    1efe:	043d      	lsls	r5, r7, #16
    1f00:	0c2d      	lsrs	r5, r5, #16
    1f02:	0403      	lsls	r3, r0, #16
    1f04:	0c3f      	lsrs	r7, r7, #16
    1f06:	0c1b      	lsrs	r3, r3, #16
    1f08:	0c02      	lsrs	r2, r0, #16
    1f0a:	1c29      	adds	r1, r5, #0
    1f0c:	4359      	muls	r1, r3
    1f0e:	4355      	muls	r5, r2
    1f10:	437b      	muls	r3, r7
    1f12:	437a      	muls	r2, r7
    1f14:	18eb      	adds	r3, r5, r3
    1f16:	0c0f      	lsrs	r7, r1, #16
    1f18:	19db      	adds	r3, r3, r7
    1f1a:	468c      	mov	ip, r1
    1f1c:	429d      	cmp	r5, r3
    1f1e:	d902      	bls.n	1f26 <__udivdi3+0x27e>
    1f20:	2780      	movs	r7, #128	; 0x80
    1f22:	027f      	lsls	r7, r7, #9
    1f24:	19d2      	adds	r2, r2, r7
    1f26:	0c1d      	lsrs	r5, r3, #16
    1f28:	1952      	adds	r2, r2, r5
    1f2a:	4592      	cmp	sl, r2
    1f2c:	d362      	bcc.n	1ff4 <__udivdi3+0x34c>
    1f2e:	d059      	beq.n	1fe4 <__udivdi3+0x33c>
    1f30:	2700      	movs	r7, #0
    1f32:	e733      	b.n	1d9c <__udivdi3+0xf4>
    1f34:	2320      	movs	r3, #32
    1f36:	1a1b      	subs	r3, r3, r0
    1f38:	1c31      	adds	r1, r6, #0
    1f3a:	1c2f      	adds	r7, r5, #0
    1f3c:	40d9      	lsrs	r1, r3
    1f3e:	40df      	lsrs	r7, r3
    1f40:	4085      	lsls	r5, r0
    1f42:	1c0b      	adds	r3, r1, #0
    1f44:	4084      	lsls	r4, r0
    1f46:	432b      	orrs	r3, r5
    1f48:	4086      	lsls	r6, r0
    1f4a:	9301      	str	r3, [sp, #4]
    1f4c:	46b3      	mov	fp, r6
    1f4e:	0423      	lsls	r3, r4, #16
    1f50:	0c26      	lsrs	r6, r4, #16
    1f52:	0c1b      	lsrs	r3, r3, #16
    1f54:	1c38      	adds	r0, r7, #0
    1f56:	1c31      	adds	r1, r6, #0
    1f58:	4698      	mov	r8, r3
    1f5a:	f7ff fc05 	bl	1768 <__aeabi_uidiv>
    1f5e:	4642      	mov	r2, r8
    1f60:	4342      	muls	r2, r0
    1f62:	1c05      	adds	r5, r0, #0
    1f64:	1c31      	adds	r1, r6, #0
    1f66:	1c38      	adds	r0, r7, #0
    1f68:	4691      	mov	r9, r2
    1f6a:	f7ff fc41 	bl	17f0 <__aeabi_uidivmod>
    1f6e:	9f01      	ldr	r7, [sp, #4]
    1f70:	0409      	lsls	r1, r1, #16
    1f72:	0c3b      	lsrs	r3, r7, #16
    1f74:	4319      	orrs	r1, r3
    1f76:	4589      	cmp	r9, r1
    1f78:	d907      	bls.n	1f8a <__udivdi3+0x2e2>
    1f7a:	1909      	adds	r1, r1, r4
    1f7c:	1e6b      	subs	r3, r5, #1
    1f7e:	428c      	cmp	r4, r1
    1f80:	d84d      	bhi.n	201e <STACK_SIZE+0x1e>
    1f82:	4589      	cmp	r9, r1
    1f84:	d94b      	bls.n	201e <STACK_SIZE+0x1e>
    1f86:	3d02      	subs	r5, #2
    1f88:	1909      	adds	r1, r1, r4
    1f8a:	464a      	mov	r2, r9
    1f8c:	1a8a      	subs	r2, r1, r2
    1f8e:	1c10      	adds	r0, r2, #0
    1f90:	1c31      	adds	r1, r6, #0
    1f92:	4692      	mov	sl, r2
    1f94:	f7ff fbe8 	bl	1768 <__aeabi_uidiv>
    1f98:	4643      	mov	r3, r8
    1f9a:	4343      	muls	r3, r0
    1f9c:	1c07      	adds	r7, r0, #0
    1f9e:	1c31      	adds	r1, r6, #0
    1fa0:	4650      	mov	r0, sl
    1fa2:	4699      	mov	r9, r3
    1fa4:	f7ff fc24 	bl	17f0 <__aeabi_uidivmod>
    1fa8:	9a01      	ldr	r2, [sp, #4]
    1faa:	0409      	lsls	r1, r1, #16
    1fac:	0413      	lsls	r3, r2, #16
    1fae:	0c1b      	lsrs	r3, r3, #16
    1fb0:	4319      	orrs	r1, r3
    1fb2:	4589      	cmp	r9, r1
    1fb4:	d907      	bls.n	1fc6 <__udivdi3+0x31e>
    1fb6:	1909      	adds	r1, r1, r4
    1fb8:	1e7b      	subs	r3, r7, #1
    1fba:	428c      	cmp	r4, r1
    1fbc:	d82d      	bhi.n	201a <STACK_SIZE+0x1a>
    1fbe:	4589      	cmp	r9, r1
    1fc0:	d92b      	bls.n	201a <STACK_SIZE+0x1a>
    1fc2:	3f02      	subs	r7, #2
    1fc4:	1909      	adds	r1, r1, r4
    1fc6:	464b      	mov	r3, r9
    1fc8:	1acb      	subs	r3, r1, r3
    1fca:	042d      	lsls	r5, r5, #16
    1fcc:	4699      	mov	r9, r3
    1fce:	432f      	orrs	r7, r5
    1fd0:	e700      	b.n	1dd4 <__udivdi3+0x12c>
    1fd2:	2700      	movs	r7, #0
    1fd4:	2001      	movs	r0, #1
    1fd6:	e6e1      	b.n	1d9c <__udivdi3+0xf4>
    1fd8:	1c1e      	adds	r6, r3, #0
    1fda:	e6c8      	b.n	1d6e <__udivdi3+0xc6>
    1fdc:	1c1f      	adds	r7, r3, #0
    1fde:	e6a8      	b.n	1d32 <__udivdi3+0x8a>
    1fe0:	4699      	mov	r9, r3
    1fe2:	e733      	b.n	1e4c <__udivdi3+0x1a4>
    1fe4:	4661      	mov	r1, ip
    1fe6:	040a      	lsls	r2, r1, #16
    1fe8:	041b      	lsls	r3, r3, #16
    1fea:	0c12      	lsrs	r2, r2, #16
    1fec:	189b      	adds	r3, r3, r2
    1fee:	40a6      	lsls	r6, r4
    1ff0:	429e      	cmp	r6, r3
    1ff2:	d29d      	bcs.n	1f30 <__udivdi3+0x288>
    1ff4:	3801      	subs	r0, #1
    1ff6:	2700      	movs	r7, #0
    1ff8:	e6d0      	b.n	1d9c <__udivdi3+0xf4>
    1ffa:	458a      	cmp	sl, r1
    1ffc:	d800      	bhi.n	2000 <STACK_SIZE>
    1ffe:	e775      	b.n	1eec <__udivdi3+0x244>
    2000:	2302      	movs	r3, #2
    2002:	425b      	negs	r3, r3
    2004:	4498      	add	r8, r3
    2006:	19c9      	adds	r1, r1, r7
    2008:	e771      	b.n	1eee <__udivdi3+0x246>
    200a:	458b      	cmp	fp, r1
    200c:	d800      	bhi.n	2010 <STACK_SIZE+0x10>
    200e:	e750      	b.n	1eb2 <__udivdi3+0x20a>
    2010:	2302      	movs	r3, #2
    2012:	425b      	negs	r3, r3
    2014:	4499      	add	r9, r3
    2016:	19c9      	adds	r1, r1, r7
    2018:	e74c      	b.n	1eb4 <__udivdi3+0x20c>
    201a:	1c1f      	adds	r7, r3, #0
    201c:	e7d3      	b.n	1fc6 <__udivdi3+0x31e>
    201e:	1c1d      	adds	r5, r3, #0
    2020:	e7b3      	b.n	1f8a <__udivdi3+0x2e2>
    2022:	3d02      	subs	r5, #2
    2024:	1900      	adds	r0, r0, r4
    2026:	e6ef      	b.n	1e08 <__udivdi3+0x160>

00002028 <__clzsi2>:
    2028:	211c      	movs	r1, #28
    202a:	2301      	movs	r3, #1
    202c:	041b      	lsls	r3, r3, #16
    202e:	4298      	cmp	r0, r3
    2030:	d301      	bcc.n	2036 <__clzsi2+0xe>
    2032:	0c00      	lsrs	r0, r0, #16
    2034:	3910      	subs	r1, #16
    2036:	0a1b      	lsrs	r3, r3, #8
    2038:	4298      	cmp	r0, r3
    203a:	d301      	bcc.n	2040 <__clzsi2+0x18>
    203c:	0a00      	lsrs	r0, r0, #8
    203e:	3908      	subs	r1, #8
    2040:	091b      	lsrs	r3, r3, #4
    2042:	4298      	cmp	r0, r3
    2044:	d301      	bcc.n	204a <__clzsi2+0x22>
    2046:	0900      	lsrs	r0, r0, #4
    2048:	3904      	subs	r1, #4
    204a:	a202      	add	r2, pc, #8	; (adr r2, 2054 <__clzsi2+0x2c>)
    204c:	5c10      	ldrb	r0, [r2, r0]
    204e:	1840      	adds	r0, r0, r1
    2050:	4770      	bx	lr
    2052:	46c0      	nop			; (mov r8, r8)
    2054:	02020304 	.word	0x02020304
    2058:	01010101 	.word	0x01010101
	...

00002064 <__libc_init_array>:
    2064:	b570      	push	{r4, r5, r6, lr}
    2066:	4b0e      	ldr	r3, [pc, #56]	; (20a0 <__libc_init_array+0x3c>)
    2068:	4d0e      	ldr	r5, [pc, #56]	; (20a4 <__libc_init_array+0x40>)
    206a:	2400      	movs	r4, #0
    206c:	1aed      	subs	r5, r5, r3
    206e:	10ad      	asrs	r5, r5, #2
    2070:	1c1e      	adds	r6, r3, #0
    2072:	42ac      	cmp	r4, r5
    2074:	d004      	beq.n	2080 <__libc_init_array+0x1c>
    2076:	00a3      	lsls	r3, r4, #2
    2078:	58f3      	ldr	r3, [r6, r3]
    207a:	4798      	blx	r3
    207c:	3401      	adds	r4, #1
    207e:	e7f8      	b.n	2072 <__libc_init_array+0xe>
    2080:	f000 f8fe 	bl	2280 <_init>
    2084:	4b08      	ldr	r3, [pc, #32]	; (20a8 <__libc_init_array+0x44>)
    2086:	4d09      	ldr	r5, [pc, #36]	; (20ac <__libc_init_array+0x48>)
    2088:	2400      	movs	r4, #0
    208a:	1aed      	subs	r5, r5, r3
    208c:	10ad      	asrs	r5, r5, #2
    208e:	1c1e      	adds	r6, r3, #0
    2090:	42ac      	cmp	r4, r5
    2092:	d004      	beq.n	209e <__libc_init_array+0x3a>
    2094:	00a3      	lsls	r3, r4, #2
    2096:	58f3      	ldr	r3, [r6, r3]
    2098:	4798      	blx	r3
    209a:	3401      	adds	r4, #1
    209c:	e7f8      	b.n	2090 <__libc_init_array+0x2c>
    209e:	bd70      	pop	{r4, r5, r6, pc}
    20a0:	0000228c 	.word	0x0000228c
    20a4:	0000228c 	.word	0x0000228c
    20a8:	0000228c 	.word	0x0000228c
    20ac:	00002294 	.word	0x00002294

000020b0 <memcpy>:
    20b0:	b510      	push	{r4, lr}
    20b2:	2300      	movs	r3, #0
    20b4:	4293      	cmp	r3, r2
    20b6:	d003      	beq.n	20c0 <memcpy+0x10>
    20b8:	5ccc      	ldrb	r4, [r1, r3]
    20ba:	54c4      	strb	r4, [r0, r3]
    20bc:	3301      	adds	r3, #1
    20be:	e7f9      	b.n	20b4 <memcpy+0x4>
    20c0:	bd10      	pop	{r4, pc}
	...

000020c4 <register_fini>:
    20c4:	b508      	push	{r3, lr}
    20c6:	4b03      	ldr	r3, [pc, #12]	; (20d4 <register_fini+0x10>)
    20c8:	2b00      	cmp	r3, #0
    20ca:	d002      	beq.n	20d2 <register_fini+0xe>
    20cc:	4802      	ldr	r0, [pc, #8]	; (20d8 <register_fini+0x14>)
    20ce:	f000 f805 	bl	20dc <atexit>
    20d2:	bd08      	pop	{r3, pc}
    20d4:	00000000 	.word	0x00000000
    20d8:	000020ed 	.word	0x000020ed

000020dc <atexit>:
    20dc:	b508      	push	{r3, lr}
    20de:	1c01      	adds	r1, r0, #0
    20e0:	2000      	movs	r0, #0
    20e2:	1c02      	adds	r2, r0, #0
    20e4:	1c03      	adds	r3, r0, #0
    20e6:	f000 f815 	bl	2114 <__register_exitproc>
    20ea:	bd08      	pop	{r3, pc}

000020ec <__libc_fini_array>:
    20ec:	b538      	push	{r3, r4, r5, lr}
    20ee:	4b07      	ldr	r3, [pc, #28]	; (210c <__libc_fini_array+0x20>)
    20f0:	4c07      	ldr	r4, [pc, #28]	; (2110 <__libc_fini_array+0x24>)
    20f2:	1c1d      	adds	r5, r3, #0
    20f4:	1ae4      	subs	r4, r4, r3
    20f6:	10a4      	asrs	r4, r4, #2
    20f8:	2c00      	cmp	r4, #0
    20fa:	d004      	beq.n	2106 <__libc_fini_array+0x1a>
    20fc:	3c01      	subs	r4, #1
    20fe:	00a3      	lsls	r3, r4, #2
    2100:	58eb      	ldr	r3, [r5, r3]
    2102:	4798      	blx	r3
    2104:	e7f8      	b.n	20f8 <__libc_fini_array+0xc>
    2106:	f000 f8c5 	bl	2294 <_fini>
    210a:	bd38      	pop	{r3, r4, r5, pc}
    210c:	000022a0 	.word	0x000022a0
    2110:	000022a4 	.word	0x000022a4

00002114 <__register_exitproc>:
    2114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2116:	1c1e      	adds	r6, r3, #0
    2118:	4b23      	ldr	r3, [pc, #140]	; (21a8 <__register_exitproc+0x94>)
    211a:	1c05      	adds	r5, r0, #0
    211c:	681b      	ldr	r3, [r3, #0]
    211e:	9101      	str	r1, [sp, #4]
    2120:	1c1c      	adds	r4, r3, #0
    2122:	34fc      	adds	r4, #252	; 0xfc
    2124:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    2126:	1c17      	adds	r7, r2, #0
    2128:	2800      	cmp	r0, #0
    212a:	d103      	bne.n	2134 <__register_exitproc+0x20>
    212c:	22a6      	movs	r2, #166	; 0xa6
    212e:	0052      	lsls	r2, r2, #1
    2130:	1898      	adds	r0, r3, r2
    2132:	64e0      	str	r0, [r4, #76]	; 0x4c
    2134:	6843      	ldr	r3, [r0, #4]
    2136:	2b1f      	cmp	r3, #31
    2138:	dd16      	ble.n	2168 <__register_exitproc+0x54>
    213a:	4b1c      	ldr	r3, [pc, #112]	; (21ac <__register_exitproc+0x98>)
    213c:	2b00      	cmp	r3, #0
    213e:	d102      	bne.n	2146 <__register_exitproc+0x32>
    2140:	2001      	movs	r0, #1
    2142:	4240      	negs	r0, r0
    2144:	e02e      	b.n	21a4 <__register_exitproc+0x90>
    2146:	20c8      	movs	r0, #200	; 0xc8
    2148:	0040      	lsls	r0, r0, #1
    214a:	e000      	b.n	214e <__register_exitproc+0x3a>
    214c:	bf00      	nop
    214e:	2800      	cmp	r0, #0
    2150:	d0f6      	beq.n	2140 <__register_exitproc+0x2c>
    2152:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    2154:	2300      	movs	r3, #0
    2156:	6002      	str	r2, [r0, #0]
    2158:	22c4      	movs	r2, #196	; 0xc4
    215a:	0052      	lsls	r2, r2, #1
    215c:	6043      	str	r3, [r0, #4]
    215e:	64e0      	str	r0, [r4, #76]	; 0x4c
    2160:	5083      	str	r3, [r0, r2]
    2162:	22c6      	movs	r2, #198	; 0xc6
    2164:	0052      	lsls	r2, r2, #1
    2166:	5083      	str	r3, [r0, r2]
    2168:	6843      	ldr	r3, [r0, #4]
    216a:	2d00      	cmp	r5, #0
    216c:	d013      	beq.n	2196 <__register_exitproc+0x82>
    216e:	009c      	lsls	r4, r3, #2
    2170:	1904      	adds	r4, r0, r4
    2172:	1c22      	adds	r2, r4, #0
    2174:	3288      	adds	r2, #136	; 0x88
    2176:	6017      	str	r7, [r2, #0]
    2178:	27c2      	movs	r7, #194	; 0xc2
    217a:	007f      	lsls	r7, r7, #1
    217c:	19c2      	adds	r2, r0, r7
    217e:	6857      	ldr	r7, [r2, #4]
    2180:	2101      	movs	r1, #1
    2182:	4099      	lsls	r1, r3
    2184:	430f      	orrs	r7, r1
    2186:	34fc      	adds	r4, #252	; 0xfc
    2188:	6057      	str	r7, [r2, #4]
    218a:	60e6      	str	r6, [r4, #12]
    218c:	2d02      	cmp	r5, #2
    218e:	d102      	bne.n	2196 <__register_exitproc+0x82>
    2190:	6894      	ldr	r4, [r2, #8]
    2192:	4321      	orrs	r1, r4
    2194:	6091      	str	r1, [r2, #8]
    2196:	1c5a      	adds	r2, r3, #1
    2198:	9f01      	ldr	r7, [sp, #4]
    219a:	3302      	adds	r3, #2
    219c:	009b      	lsls	r3, r3, #2
    219e:	6042      	str	r2, [r0, #4]
    21a0:	501f      	str	r7, [r3, r0]
    21a2:	2000      	movs	r0, #0
    21a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00002278 	.word	0x00002278
    21ac:	00000000 	.word	0x00000000
    21b0:	000001cc 	.word	0x000001cc
    21b4:	000001f4 	.word	0x000001f4
    21b8:	000001d0 	.word	0x000001d0
    21bc:	000001d4 	.word	0x000001d4
    21c0:	000001d8 	.word	0x000001d8
    21c4:	000001dc 	.word	0x000001dc
    21c8:	000001e0 	.word	0x000001e0
    21cc:	000001e4 	.word	0x000001e4
    21d0:	000001e8 	.word	0x000001e8
    21d4:	000001ec 	.word	0x000001ec
    21d8:	42000800 	.word	0x42000800
    21dc:	42000c00 	.word	0x42000c00
    21e0:	42001000 	.word	0x42001000
    21e4:	42001400 	.word	0x42001400
    21e8:	42001800 	.word	0x42001800
    21ec:	42001c00 	.word	0x42001c00
    21f0:	0c0b0a09 	.word	0x0c0b0a09
    21f4:	00000e0d 	.word	0x00000e0d
    21f8:	00000ff0 	.word	0x00000ff0
    21fc:	0000104a 	.word	0x0000104a
    2200:	0000104a 	.word	0x0000104a
    2204:	00000fea 	.word	0x00000fea
    2208:	00000fea 	.word	0x00000fea
    220c:	00001006 	.word	0x00001006
    2210:	00000ff6 	.word	0x00000ff6
    2214:	0000100c 	.word	0x0000100c
    2218:	0000103a 	.word	0x0000103a
    221c:	000010d4 	.word	0x000010d4
    2220:	0000113a 	.word	0x0000113a
    2224:	0000113a 	.word	0x0000113a
    2228:	000010b4 	.word	0x000010b4
    222c:	000010c6 	.word	0x000010c6
    2230:	000010e4 	.word	0x000010e4
    2234:	000010b8 	.word	0x000010b8
    2238:	000010f4 	.word	0x000010f4
    223c:	00001128 	.word	0x00001128
    2240:	65657753 	.word	0x65657753
    2244:	57202174 	.word	0x57202174
    2248:	61632065 	.word	0x61632065
    224c:	6573206e 	.word	0x6573206e
    2250:	6c462065 	.word	0x6c462065
    2254:	20687361 	.word	0x20687361
    2258:	6f6d654d 	.word	0x6f6d654d
    225c:	0d217972 	.word	0x0d217972
    2260:	0000000a 	.word	0x0000000a
    2264:	74747542 	.word	0x74747542
    2268:	50206e6f 	.word	0x50206e6f
    226c:	73736572 	.word	0x73736572
    2270:	0d216465 	.word	0x0d216465
    2274:	0000000a 	.word	0x0000000a

00002278 <_global_impure_ptr>:
    2278:	20000018 00000043                       ... C...

00002280 <_init>:
    2280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2286:	bc08      	pop	{r3}
    2288:	469e      	mov	lr, r3
    228a:	4770      	bx	lr

0000228c <__init_array_start>:
    228c:	000020c5 	.word	0x000020c5

00002290 <__frame_dummy_init_array_entry>:
    2290:	00000131                                1...

00002294 <_fini>:
    2294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	bcf8      	pop	{r3, r4, r5, r6, r7}
    229a:	bc08      	pop	{r3}
    229c:	469e      	mov	lr, r3
    229e:	4770      	bx	lr

000022a0 <__fini_array_start>:
    22a0:	00000105 	.word	0x00000105

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
2000004c:	227c 0000 0000 0000 0000 0000 0000 0000     |"..............
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
